%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Presentation1.pdf
%%Creator: Adobe Acrobat 11.0.0
%%For: Maurie Kim
%%CreationDate: 5/7/2014, 12:11:55 AM
%%BoundingBox: 0 0 385 236
%%HiResBoundingBox: 0 0 384.0254 235.1417
%%CropBox: 0 0 384.0254 235.1417
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 851 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2014-05-07T00:10:35-05:00"
   xmp:CreatorTool="Microsoft® PowerPoint® 2010"
   xmp:ModifyDate="2014-05-07T00:10:35-05:00"
   pdf:Producer="Microsoft® PowerPoint® 2010">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Windows User</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">H3 Good Guys</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -235.142 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 235.142 li
384.025 235.142 li
384.025 0 li
cp
clp
gsave
-.664978 235.434 mo
384.335 235.434 li
384.335 -.566328 li
-.664978 -.566328 li
-.664978 235.434 li
clp
-98.665 396.434 mo
621.335 396.434 li
621.335 -143.566 li
-98.665 -143.566 li
-98.665 396.434 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
-2.66497 234.434 mo
411.335 234.434 li
411.335 -2.56632 li
-2.66497 -2.56632 li
-2.66497 234.434 li
1 /0 /CSD get_res sepcs
.149 sep
ef
99.335 192.434 mo
49.625 192.434 9.33499 152.144 9.33499 102.434 cv
9.33499 52.7237 49.625 12.4336 99.335 12.4336 cv
118.271 12.4336 135.839 18.2798 150.335 28.2658 cv
126.776 44.4951 111.335 71.6592 111.335 102.434 cv
111.335 133.208 126.776 160.372 150.335 176.601 cv
135.839 186.587 118.271 192.434 99.335 192.434 cv
/1 
[/DeviceCMYK] /CSA add_res
.380392 .231373 .0117647 .0745098 cmyk
f
201.335 192.434 mo
182.399 192.434 164.831 186.587 150.335 176.601 cv
173.894 160.372 189.335 133.208 189.335 102.434 cv
189.335 71.6592 173.894 44.4951 150.335 28.2658 cv
164.831 18.2798 182.399 12.4336 201.335 12.4336 cv
251.045 12.4336 291.335 52.7237 291.335 102.434 cv
291.335 152.144 251.045 192.434 201.335 192.434 cv
.0941176 .431373 .384314 .105882 cmyk
f
150.335 176.601 mo
126.776 160.372 111.335 133.208 111.335 102.434 cv
111.335 71.6592 126.776 44.4951 150.335 28.2658 cv
173.894 44.4951 189.335 71.6592 189.335 102.434 cv
189.335 133.208 173.894 160.372 150.335 176.601 cv
.282353 .545098 .388235 .0705882 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: RDHAAA+Calibri,Italic Initial
ct_T42Dict begin
-0.723 -0.273 1.258 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /RDHAAA+Calibri,Italic
Type42DictBegin
[<00010000000c000c000c000c4f532f32f9dfd825000000cc000000606376
7420ba7ecec70000012c000005146670676da1ea42ac0000064000000913
676c796683ac345600007e14000060bc68656164ed75069500000f540000
0036686865610da913bc00000f8c00000024686d74789025325f00000fb0
000030fa6c6f636185c76c44000040ac00001eda6d61787019d412410000
5f88000000206e616d65ceff477300005fa800000d68707265705fc3ffe0
00006d1000001102676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
0202040a0204e00002ff4000acff00000001000000004d53202000010000
207f0600fe0001c4079e02262000019f0000000003bd0511000000200003
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
00000000000000000000004a004c00540055005600570059004f004e004f
00500051004d005d005f00610063006400650066006700680069006a006b
006c006d006e006d0066006f007000710072007300740075007600710074
00700071007200740075007600780079007a007d00780079007a007b007c
007d0079007c007a007c007d007e007f00800081007e007f008000810082
007f008000810082007e007f008000810082008300850083008400850086
008700880089008600880089008300840085008600870088008900830084
00850086008700880089008a008b008c008d008e008f008a008b008c008d
008f008a008b008c008d008e008f008a008b008c008d008e008f00900095
00900091009200930094009500980099009a009b009c0090009100930096
0097009b009c009f00a20094009600900091009200930094009500960097
00980099009a009b009c009d009e009f00a000a100a200a300a600a70090
00910092009300940095009600980099009f00bc00bd00c100c600be00bf
00bf00c100c200b900be00c200df00e000e400e700e800e9012b01360147
00f200f400cf00640066006a006c006d0070006c006d0069006c00670073
00740075007600770078007a007b007c007d007e00810084008500860087
00880089008a0076007a007b007c007e007f008000820083008400870088
0089008a0077008500870079008200840085008600870088008a0079007a
007c007d007e0081008300840086008700880089008b008c008d008e008f
00900091009200940095008b008c008d008e008f0093009400950093008b
008c008d008e00900091009200930094008c008d008e008f009000910092
009300940095009700980099009a009b009c0096009700980099009a009b
009c009a009c009600980099009a009b009c00960097009b009c009d009e
009f00a000a100a2009d009e009f00a000a100a200a1009d009e009f00a0
00a100a2009d009e009f00a000a100a200a300a500a300a400a500a600a7
00a300a500a300a400a500a600a700a300a400a500a600a700a800a900a8
00a900aa00ab00ac00a800ab00ac00a800a900aa00ab00ac00a800a900aa
00ab00ac00ad00ae00af00b000b100b300b500b600b700b800af00b000b1
00b300b400b700ad00ae00af00b000b100b200b300b400b500b600b700b8
00ad00ae00af00b000b100b200b300b400b500b600b700ba00bb00bc00bd
00bf00c000c100c200c300c400ba00bb00bf00c300b900ba00bb00bc00bf
00c100c200c300ba00bc00bf00c200c700c900cb00cc00cd00c500c600c7
00c600c700cb00ce00cf00d100d200db00dc00de00df00e000e400d600e8
00e90123012b00d000d1042600d8050e010503c000c2024e0078042600d7
02990092000005e4000e40465f5e5d5c5b5a59585554535251504f4e4d4c
4b4a494847464544434241403f3e3d3c3b3a39383736352f2e2d2c282625
2423221f181411100f0d0b0a090807060504030201002c4523466020b026
60b004262348482d2c452346236120b02661b004262348482d2c45234660
b0206120b04660b004262348482d2c4523462361b0206020b02661b02061
b004262348482d2c45234660b0406120b06660b004262348482d2c452346
2361b0406020b02661b04061b004262348482d2c0110203c003c2d2c2045
2320b0cd442320b8015a51582320b08d44235920b0ed51582320b04d4423
5920b0042651582320b00d44235921212d2c20204518684420b001602045
b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d
2c00b0282370b101283e01b0282370b10228453ab10200080d2d2c2045b0
0325456164b050515845441b2121592d2c2045b0004360442d2c01b00643
b00743650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c6423
64615c58b00361592d2c8a03458a8a87b0112bb0292344b0297ae4182d2c
4565b02c234445b02b23442d2c4b525845441b2121592d2c01b005251023
208af500b0016023edec2d2c01b005251023208af500b0016123edec2d2c
01b0062510f500edec2d2c20b001600110203c003c2d2c20b00161011020
3c003c2d2c00b00743b006430b2d2c21210c6423648bb84000622d2c21b0
8051580c6423648bb82000621bb200402f2b59b002602d2c21b0c051580c
6423648bb81555621bb200802f2b59b002602d2c0c6423648bb840006260
23212d2c4523456023456023456023766818b08062202d2cb00426b00426
b00425b0042545234520b003266062636820b0032661658a2344442d2c20
45b0005458b040442045b04061441b2121592d2c45b1302f4523456160b0
016069442d2c4b5158b02f2370b01423421b2121592d2c4b515820b00325
45695358441b2121591b2121592d2c45b01443b0006063b0016069442d2c
b02f45442d2c452320458a60442d2c45234560442d2c4b235158b90033ff
e0b134201bb3330034005944442d2cb0164358b00326458a586466b01f60
1b64b020606620581b21b04059b001615923586559b02923442310b029e0
1b2121212121592d2cb0164358b004254564b020606620581b21b04059b0
016123586559b0292344b00425b00725082058021b0359b0052510b00425
2046b0042523423cb0072510b006252046b00425b0016023423c2058011b
0059b0052510b00425b029e0b0072510b00625b029e0b00425b007250820
58021b0359b00425b003254348b00625b00325b0016043481b2159212121
212121212d2cb0164358b004254564b020606620581b21b04059b0016123
581b6559b0292344b00525b00825082058021b0359b0042510b005252046
b0042523423cb00425b0072508b0072510b006252046b00425b001602342
3c2058011b0059b0042510b00525b029e0b02920456544b0072510b00625
b029e0b00525b00825082058021b0359b00525b003254348b00425b00725
08b00625b00325b0016043481b2159212121212121212d2c02b004252020
46b004252342b0052508b003254548212121212d2c02b0032520b0042508
b0022543482121212d2c452320451820b00050205823652359236820b040
505821b04059235865598a60442d2c4b53234b515a5820458a60441b2121
592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d
2cb000214b5458381b2121592d2cb002435458b0462b1b21212121592d2c
b002435458b0472b1b212121592d2cb002435458b0482b1b21212121592d
2cb002435458b0492b1b212121592d2c208a08234b538a4b515a5823381b
2121592d2c0020b200400325b0062649618b3812342d2c01462346602346
6123201020468a61b8ff80628ab140408a704560683a2d2c208a2349648a
2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b54422d2cb102
0042b123018851b1400188535a58b910000020885458b202010243604259
b12401885158b920000040885458b2020202436042b12401885458b20220
02436042004b014b5258b2020802436042591bb940000080885458b20204
0243604259b94000008063b80100885458b202080243604259b940000100
63b80200885458b202100243604259b94000020063b80400885458b20240
0243604259595959592d2c451868234b51582320452064b04050587c5968
8a6059442d2cb00016b00225b0022501b001233e00b002233eb10102060c
b00a236542b00b234201b001233f00b002233fb10102060cb006236542b0
072342b00116012d2c20b82000628a6023622d2cb0072558001b0159b004
2510b00325b0022520b8ffff545821cd1bed5921b006255cb006255a58b0
092b5920b005254ab0042547b004254760b0062547b0806361b00225b000
5558b00325b00725496359b0082558001b0159b00425b0062549b009255c
b009255a58b0092b59b0072546b0806361b0032520b0005558631b215961
2320b0005558b080631b21b08059b0592bb006255c586959b00425202010
b00048233ab0062658001b0159b0052658b003252f598a12233221212d2c
b00625b00a2587b00625b009254ab0005358b00625b00a251bb00925b007
2559b00225b00225070cb005256323b00625636020b94000040063535821
b00426b00426b00a1bb94000040063655158b0042665b0042665b00a1bb0
0426b00426b000b00325b003250b0d0ab0092eb00725b007250b0d0ab00b
2eb00525b0052507595920b0005558b00525b0052587b00725b007250bb0
092510b00b25b0092620b8ffff545821cd1bed59b00525b0052507b00825
b00b254923b00625b0062587b00a2510b00b25c15920b00051b800522378
b00161b00225b00725b0072507b00a25b00d254961b08062b00525b00525
0bb00a252338b00625b0062587b00825b008250bb00a2510b00b25c4b006
25b0062507b00925b00c2549b0032554b8ffa72379212121212121212121
2121212d2c23b0005458b9400000001bb900004000598ab0005458b94000
00001bb90000400059b05b2b2d2c08b0005458b9400000001bb900004000
590db05b2b2d2c8a8a080d8ab0005458b9400000001bb90000400059b05b
2b2d2cb00426b00426080db00426b00426080db05b2b2d00000100000005
dc2972f5441b5f0f3cf50019080000000000bbeb7ccc00000000ce0d62a1
fa34fdcb0a140836000200090002000000000000000100000600fe0001c4
0aa0fa34fa0b0a140800019a0000000000000000000000000911040e0000
000000000000000001cf0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000042e0073000000000000000000000000000000000000
000004ec0058000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000003ad
0052050c006e0000000000000000000000000000000004fc005200000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000035d0058000000000000000000000000000000000000000006d7
0052000000000000000000000000000000000000000000000000053c0072
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000004220052000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000003e600a30000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000048a00c1071f00db00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000003f4ffb700000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000404004903ab00690000000000000000000000000000000000000000
0465004c0000000000000000000000000380004d00000000000000000000
000000000000000000000000000000000000000000000000000003500047
0482006b0000000000000000000000000000000004760047000000000000
000001ec0047000000000000000000000000000000000000000000000000
0000000001ec001100000000000000000000000000000000000000000000
000002e0004d000000000000000000000000000000000000000006060046
047900460000000000000000000000000000000000000000049900600000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000003c20047000000000000000003e700470000
00000000000000000000033f000200000000000000000000000000000000
00000000035900800000000000000000000000000485007d000000000000
000000000000000000000000000000000000000000000000000000000000
0000000003ed0095061e00a6000000000000000000000000000000000000
0000037e0086000000000000000000000000000000000000000000000000
0000000000000000041d0051000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
041d003d0354004c00000000000000000000000000000000000000000746
004c0000000005f1004c00000000041d0051000000000000000000000000
03d2004d0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000041d0042000000000000
0000000000000000000003c4ffbd00000000000000000000000000000000
041d003f000000000000000001d6003f0000000000000000000000000000
00000000000000000000000000000000000001d6003f0000000000000000
00000000000000000000000000000000000000000000000001d6003f0000
0000000000000000000000000000000000000654003f041d003f00000000
0000000000000000000000000000000000000000041b004e000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000041dfff8000000000000000002be003f000000000000
000000000000031d00090000000000000000000000000000000000000000
05a5000900000000000000000000000002ae007100000000000000000000
000000000000047500710000000000000000000000000000000000000000
00000000000000000000000000000000051300710000000006d900710000
000000000000000000000000000000000000000000000000000000000000
00000000041d007000000000000000000000000000000000000000000000
0000000000000000000000000000000000000391007c0000000000000000
000000000000000000000000000000000394001500000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000002d800aa02d5009f024100a602d800aa02a100a80000000002d8
00a702da009f016200a20000000000000000015e00a0044c00a002db00a0
02d600aa02d700760000000001f000a00230008301e300bb02db00c10285
00c300000000000000000286008f00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000001ce00000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000029b00bb00000000000000000000000000000000000000000000
00000260009b000000000000000000000000000000000000000000000000
000000000585004900000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000033500f70000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000003de0039
000000000000000003c4ffbd000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000002fb00cb034b00b900000000
02a800b8034400d5035b00c2000000000000000000000000025b00c8046d
00bc00000000037500cb02d800c1000000000000000000000000025700ba
00000000032300ef044500e5000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000034b00b9000000000000
0000034400d5035b00c2000000000000000000000000025b00c8046d00bc
0000000000000000037500cb0000000002d800c100000000025700ba0000
0000044500e5000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a80128012801280128012801280196019601960196019601960196
0196019601960196019601960196022102de02de02de02de02de03830383
038303830383038303830383038303830383038303830383038303830383
038303dc03dc03dc03dc03dc03dc048d048d048d048d048d048d048d04fb
04fb04fb04fb04fb04fb04fb04fb04fb04fb04fb04fb0583058305830583
05830583058305830583058305830583058305df05df05df05df05df05df
05df05df05df05df05df05df05df05df05df064706f406f406f406f406f4
06f406f406f406f406f406f406f406f406f406f4075d075d075d075d075d
075d075d075d075d075d075d075d075d07de085408540854085408540854
08a708a708a708a7090d090d090d090d090d090d090d090d090d090d096a
09f209f209f209f209f20a6b0a6b0a6b0aa20aa20aa20aa20aa20aa20aa2
0aa20aad0aad0aad0aad0aad0aad0aad0af10af10af10af10af10af10b7a
0bf70bf70bf70bf70bf70bf70c510c510c510c510c510c510c510c510c51
0c510c510c510cb90cb90cb90d490d490d490d490dd70dd70dd70dd70dd7
0dd70e260e260e260e260e830e830e830e830e830e830e830e830e830e83
0e830ed80f620f620f620f620f620f620fb90fb90fb90fb90fb90fb90fb9
0fb90fb91054105410541054105410541054105410541054105410541054
1101118c118c118c118c118c118c12921292139313931430143014301430
14c714c714c714c714c714c714c714c714c714c714c714c714c714c714c7
14c714c714c714c714c714c714c714c714c714c714c714c714c714c714c7
14c714c714c714c714c714c714c714c714c714c714c714c714c714c714c7
14c714c714c714c714c71590159015901590159016631663166316631663
17001700170017751775177517751775177517751775177517ac17ac17ac
17ac17ac17ac17ac17ac17ac17f417f417f417f417f417f418c7195a195a
195a195a195a195a195a19c819c819c819c819c819c819c819c819c819c8
19c819c81a6c1a6c1a6c1aed1aed1aed1aed1ba21ba21ba21ba21ba21ba2
1cc61cc61cc61cc61d6a1d6a1d6a1d6a1d6a1e071e071e071e071e071e07
1e071e071e071e071ecb1ecb1fb41fb41fb41fb41fb41fb41fb41fb41fb4
1fb42045204520452045204520452045204520452045204520b920b920b9
20b920b920b920b921372137213721372137213721372137213721372137
213721a7222b2292230d238e238e242a24a9250225022502253a25e02652
269d2722272227842809288928fd295f295f295f29ca29ca29ca29ca29ca
29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca
29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca
29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca
29ca29ca29ca29ca29ca29ca29ca29ca29ca29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff2a642a642a642a642a642a642a642ac82ac82ac82ac82ac82ac82ac8
2ac82b452b452b452b452b452b452b452b452b452b452b452b452b452b45
2b452b452b452b452b452b452b452b452b452b452b452b452b452b452b45
2b452b452b452b452b452b452b452b452b452b452b452b452b452b452b45
2b452b452b452b452b452b452b452b452b452b452b452b452b452b452b45
2b452b452b452ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12c1c
2c1c2c1c2c242c242c242c242c242c242c242c242c242c242c242c242c24
2c242c242c242c242c242c242c242c242c242c242c242c242c822c8a2c8a
2ccc2cd42cdc2cdc2cdc2cdc2ce42cec2cec2cf42cfc2cfc2cfc2cfc2d04
2d042d412d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d922d922d922e092e5f2e5f2e5f2e5f2e972f03
2f032f032f572f572fa92fa92fea2fea305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e0000000100000f6c00a10005006c000300020010002f00600000
09ed1102000200010000002d022200000003000000000064000000000003
00000001000e00640000000300000002000c032a00000003000000030032
03040000000300000004001c031a00000003000000050018033600000003
00000006001c034e00000003000000070076036a0000000300000008002a
000e0000000300000009002003e0000000030000000a02a0006400000003
0000000b00560400000000030000000c002a0456000000030000000d0298
0480000000030000000e006c071800010000000000000032078400010000
00000001000707b600010000000000020006091900010000000000030019
09060001000000000004000e09110001000000000005000c091f00010000
00000006000e092b0001000000000007003b093900010000000000080015
078b000100000000000900100974000100000000000a015007b600010000
0000000b002b0984000100000000000c001509af000100000000000d014c
09c4000100000000000e00360b1000030001040900000064000000030001
04090001000e00640003000104090002000c032a00030001040900030032
03040003000104090004001c031a00030001040900050018033600030001
04090006001c034e00030001040900070076036a0003000104090008002a
000e0003000104090009002003e0000300010409000a02a0006400030001
0409000b00560400000300010409000c002a0456000300010409000d0298
0480000300010409000e006c071800a9002000320030003100330020004d
006900630072006f0073006f0066007400200043006f00720070006f0072
006100740069006f006e002e00200041006c006c00200052006900670068
00740073002000520065007300650072007600650064002e00430061006c
0069006200720069002000690073002000610020006d006f006400650072
006e002000730061006e0073002000730065007200690066002000660061
006d0069006c00790020007700690074006800200073007500620074006c
006500200072006f0075006e00640069006e006700730020006f006e0020
007300740065006d007300200061006e006400200063006f0072006e0065
00720073002e002000490074002000660065006100740075007200650073
0020007200650061006c0020006900740061006c006900630073002c0020
0073006d0061006c006c00200063006100700073002c00200061006e0064
0020006d0075006c007400690070006c00650020006e0075006d00650072
0061006c00200073006500740073002e0020004900740073002000700072
006f0070006f007200740069006f006e007300200061006c006c006f0077
0020006800690067006800200069006d007000610063007400200069006e
002000740069006700680074006c007900200073006500740020006c0069
006e006500730020006f0066002000620069006700200061006e00640020
0073006d0061006c006c0020007400650078007400200061006c0069006b
0065002e002000430061006c0069006200720069002700730020006d0061
006e0079002000630075007200760065007300200061006e006400200074
006800650020006e00650077002000720061007300740065007200690073
006500720020007400650061006d00200075007000200069006e00200062
00690067006700650072002000730069007a0065007300200074006f0020
00720065007600650061006c002000610020007700610072006d00200061
006e006400200073006f0066007400200063006800610072006100630074
00650072002e004d006900630072006f0073006f00660074003a00200043
0061006c00690062007200690020004900740061006c0069006300560065
007200730069006f006e00200035002e0038003600430061006c00690062
00720069002d004900740061006c0069006300430061006c006900620072
006900200069007300200061002000740072006100640065006d00610072
006b0020006f006600200074006800650020004d006900630072006f0073
006f00660074002000670072006f007500700020006f006600200063006f
006d00700061006e006900650073002e004c007500630028006100730029
002000640065002000470072006f006f00740068007400740070003a002f
002f007700770077002e006d006900630072006f0073006f00660074002e
0063006f006d002f007400790070006f006700720061007000680079002f
006300740066006f006e007400730068007400740070003a002f002f0066
006f006e007400660061006200720069006b002e0063006f006d0059006f
00750020006d006100790020007500730065002000740068006900730020
0066006f006e00740020006100730020007000650072006d006900740074
006500640020006200790020007400680065002000450055004c00410020
0066006f00720020007400680065002000700072006f0064007500630074
00200069006e002000770068006900630068002000740068006900730020
0066006f006e007400200069007300200069006e0063006c007500640065
006400200074006f00200064006900730070006c0061007900200061006e
00640020007000720069006e007400200063006f006e00740065006e0074
002e00200059006f00750020006d006100790020006f006e006c00790020
00280069002900200065006d006200650064002000740068006900730020
0066006f006e007400200069006e00200063006f006e00740065006e0074
0020006100730020007000650072006d0069007400740065006400200062
0079002000740068006500200065006d00620065006400640069006e0067
0020007200650073007400720069006300740069006f006e007300200069
006e0063006c007500640065006400200069006e00200074006800690073
00200066006f006e0074003b00200061006e006400200028006900690029
002000740065006d0070006f0072006100720069006c007900200064006f
0077006e006c006f006100640020007400680069007300200066006f006e
007400200074006f002000610020007000720069006e0074006500720020
006f00720020006f00740068006500720020006f00750074007000750074
002000640065007600690063006500200074006f002000680065006c0070
0020007000720069006e007400200063006f006e00740065006e0074002e
0068007400740070003a002f002f007700770077002e006d006900630072
006f0073006f00660074002e0063006f006d002f007400790070006f0067
00720061007000680079002f0066006f006e00740073002f006400650066
00610075006c0074002e0061007300700078a92032303133204d6963726f
736f667420436f72706f726174696f6e2e20416c6c205269676874732052
657365727665642e43616c696272692069732061206d6f6465726e207361
6e732073657269662066616d696c79207769746820737562746c6520726f
756e64696e6773206f6e207374656d7320616e6420636f726e6572732e20
4974206665617475726573207265616c206974616c6963732c20736d616c
6c20636170732c20616e64206d756c7469706c65206e756d6572616c2073
6574732e204974732070726f706f7274696f6e7320616c6c6f7720686967
6820696d7061637420696e2074696768746c7920736574206c696e657320
6f662062696720616e6420736d616c6c207465787420616c696b652e2043
616c696272692773206d616e792063757276657320616e6420746865206e
65772072617374657269736572207465616d20757020696e206269676765
722073697a657320746f2072657665616c2061207761726d20616e642073
6f6674206368617261637465722e4d6963726f736f66743a2043616c6962
7269204974616c696356657273696f6e20352e383643616c696272692d49
74616c696343616c6962726920697320612074726164656d61726b206f66
20746865204d6963726f736f66742067726f7570206f6620636f6d70616e
6965732e4c7563286173292064652047726f6f74687474703a2f2f777777
2e6d6963726f736f66742e636f6d2f7479706f6772617068792f6374666f
6e7473687474703a2f2f666f6e7466616272696b2e636f6d596f75206d61
7920757365207468697320666f6e74206173207065726d69747465642062
79207468652045554c4120666f72207468652070726f6475637420696e20
7768696368207468697320666f6e7420697320696e636c7564656420746f
20646973706c617920616e64207072696e7420636f6e74656e742e20596f
75206d6179206f6e6c792028692920656d626564207468697320666f6e74
20696e20636f6e74656e74206173207065726d6974746564206279207468
6520656d62656464696e67207265737472696374696f6e7320696e636c75
64656420696e207468697320666f6e743b20616e6420286969292074656d
706f726172696c7920646f776e6c6f6164207468697320666f6e7420746f
2061207072696e746572206f72206f74686572206f757470757420646576
69636520746f2068656c70207072696e7420636f6e74656e742e68747470
3a2f2f7777772e6d6963726f736f66742e636f6d2f7479706f6772617068
792f666f6e74732f64656661756c742e6173707800>
<b10903b8027ab21e3e1fb80279b21e3e1fb80278b21e0b1fb80277b21e0b
1fb80276b21e3a1fb80275b21e3a1fb80274b21e3e1fb80273b21e3b1fb8
0272b21e3c1fb80271b21e3c1fb80270b21e3c1fb8026fb21e3d1fb8026e
b21e3d1fb8026db21e3e1fb8026cb21e3e1fb8026bb21d411fb8026ab21d
411fb80269b21d421fb80268b21d431fb80267b21d431fb80266b21d431f
b80265b21d431fb80264b21d431fb80263b21d411fb80262b21d421fb802
61b21d421fb80260b21d431fb8025fb21d431fb8025eb21c451fb8025db2
1c451fb8025cb21c451fb8025bb21c451fb8025ab21c451fb80259b21c45
1fb80258b21c451fb80257b21c451fb80256b21c451fb80255b21c451fb8
0254b21c451fb80252b21c451fb80251b21c451fb80250b21c451fb8024f
b21c451fb8024eb21c441fb8024db21c451fb8024cb21c451fb8024bb21c
451fb8024ab21c451fb80249b21c451fb80248b21c451fb80247b21c451f
b80246b21c451fb80245b21c451fb80244b21b491fb80243b21b4a1fb802
42b21b4a1fb80241b21b4a1fb80240b21b4b1fb8023fb21b4b1fb8023eb2
1b4c1fb8023db21b4c1fb8023cb21b4c1fb8023bb21b4c1fb8023ab21b4c
1fb80253b21b4c1fb80239b21b491fb80238b21b491fb80237b21b4a1fb8
0236b21b4a1fb80235b21b4a1fb80234b21b4b1fb80233b21b4b1fb80232
b21b4c1fb80231b21b4c1fb80230b21b4c1fb8022fb21b4c1fb8022eb21b
4c1fb8022db21b491fb8022cb21b4a1fb8022bb21b4b1fb8022ab21b4c1f
b80229b21b4c1fb80228b21b4c1fb80227b21b491fb80226b21b491fb802
25b21b4a1fb80224b21b4a1fb80223b21b4b1fb80222b21b4c1fb80221b2
1b4c1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021db21a4e
1fb8021cb21a4e1fb8021bb21a4f1fb8021ab21a4f1fb80219b21a4f1fb8
0218b21a4e1fb80217b21a4e1fb80216b21a4f1fb80215b21a4f1fb80214
b21a4f1fb80213b21a4e1fb80212b21a4e1fb80211b21a4f1fb80210b21a
4e1fb8020fb21a4e1fb8020eb21a4f1fb8020db21a4f1fb8020cb21a4f1f
b8020bb21a4f1fb8020ab21a4f1fb80209b219501fb80208b219511fb802
07b219511fb80206b219511fb80205b219511fb80204b219501fb80203b2
19511fb80202b219511fb80201b219511fb80200b219511fb801ffb21951
1fb801feb219511fb801fdb219501fb801fcb219511fb801fbb219511fb8
01fab219511fb801f9b219511fb801f8b219511fb801f7b219511fb801f6
b218531fb801f5b218531fb801f4b218541fb801f3b218541fb801f2b218
541fb801f1b218541fb801f0b218531fb801efb218531fb801eeb218541f
b801edb218541fb801ecb218541fb801ebb218541fb801eab218531fb801
e9b218531fb801e8b218531fb801e7b218541fb801e6b218541fb801e5b2
18541fb801e4b218541fb801e3b218531fb801e2b218531fb801e1b21854
1fb801e0b218541fb801dfb218541fb801deb218541fb801ddb217561fb8
01dcb217561fb801dbb217571fb801dab217571fb801d9b217561fb801d8
b217561fb801d7b217571fb801d6b217571fb801d5b217571fb801d4b217
571fb801d3b217561fb801d2b217571fb801d1b217561fb801d0b217561f
b801cfb217571fb801ceb217571fb801cdb217571fb801ccb217571fb801
cbb217571fb801cab217561fb801c9b217561fb801c8b217571fb801c7b2
17571fb801c6b217571fb801c5b217571fb801c4b2163e1fb801c3b2163f
1fb801c2b2163f1fb801c1b2165b1fb801c0b2165b1fb801bfb2165b1fb8
01beb2165b1fb801bdb2165b1fb801bcb2165b1fb801bbb2165b1fb801ba
b2163f1fb801b9b2163f1fb801b8b2165b1fb801b7b2165b1fb801b6b216
5b1fb801b5b2165b1fb801b4b2165b1fb801b3b2165b1fb801b2b2165b1f
b801b1b2163f1fb801b0b2163e1fb801afb2163f1fb801aeb2163f1fb801
adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2165b1fb801a9b2
165b1fb801a8b2163e1fb801a7b2163f1fb801a6b2165b1fb801a5b2165b
1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b2165b1fb8
01a0b2165b1fb8019fb2165b1fb8019eb215621fb8019db215621fb8019c
b215631fb8019bb215641fb8019ab215651fb80199b215661fb80198b215
661fb80197b215661fb80196b215661fb80195b215661fb80194b215661f
b80193b215661fb80192b215611fb80191b215621fb80190b215631fb801
8fb215641fb8018eb215641fb8018db215651fb8018cb215661fb8018bb2
15661fb8018ab215631fb80189b215641fb80188b215551fb80187b21561
1fb80186b215621fb80185b215621fb80184b215631fb80183b215651fb8
0182b215661fb80181b215661fb80180b215661fb8017fb215661fb8017e
b215661fb8017db215661fb8017cb215661fb8017bb215661fb8017ab215
451fb80179b215611fb80178b215621fb80177b215621fb80176b215631f
b80175b215641fb80174b215641fb80173b215651fb80172b215661fb801
71b215661fb80170b215661fb8016fb215661fb8016eb215661fb8016db2
15661fb8016cb215661fb8016bb215551fb8016ab215451fb80169b21545
1fb80168b215361fb80167b215361fb80166b214821fb80165b214561fb8
0164b2147f1fb80163b214551fb80162b214561fb80161b214401fb80160
b214551fb8015fb214561fb8015eb2147e1fb8015db214831fb8015cb214
851fb8015bb2133d1fb8015ab2131e1fb80159b2131e1fb80158b2130a1f
b80157b2130a1fb80156b2130b1fb80155b2133a1fb80154b2133a1fb801
53b2133a1fb80152b2133b1fb80151b2133c1fb80150b2133c1fb8014fb2
12451fb8014eb212461fb8014db212461fb8014cb212451fb8014bb21245
1fb8014ab212461fb80149b212461fb80148b212461fb80147b212441fb8
0146b212451fb80145b212461fb80144b212461fb80143b211471fb80142
b211571fb80141b211581fb80140b211591fb8013fb2115a1fb8013eb211
5a1fb8013db2115b1fb8013cb2115b1fb8013bb2115b1fb8013ab2115b1f
b80139b2112b1fb80138b2112c1fb80137b211391fb80136b211391fb801
35b211461fb80134b211471fb80133b211471fb80132b211551fb80131b2
11551fb80130b211561fb8012fb211561fb8012eb211571fb8012db21157
1fb8012cb211581fb8012bb211591fb8012ab211591fb80129b2115a1fb8
0128b2115a1fb80127b2115b1fb80126b2115b1fb80125b2115b1fb80124
b2115b1fb80123b211591fb80122b2115a1fb80121b211391fb80120b211
471fb8011fb211561fb8011eb211561fb8011db211591fb8011cb211591f
b8011bb2115b1fb8011ab2115b1fb80119b2115b1fb80118b211561fb801
17b211561fb80116b211571fb80115b211571fb80114b211581fb80113b2
115a1fb80112b2115a1fb80111b2115b1fb80110b2115b1fb8010fb2115b
1fb8010eb2115b1fb8010db2115a1fb8010cb2115b1fb8010bb2105d1fb8
010ab2105e1fb80109b2105f1fb80108b2105f1fb80107b2105f1fb80106
b2105f1fb80105b2105d1fb80104b2105e1fb80103b2105f1fb80102b210
5f1fb80101b2105f1fb8010040ff105f1fff105d1ffe105f1ffd105f1ffc
105f1ffb105f1ffa105d1ff9105e1ff8105f1ff7105f1ff6105f1ff5105f
1ff40f621ff30f621ff20f631ff10f641ff00f641fef0f641fee0f641fed
0f621fec0f621feb0f631fea0f641fe90f641fe80f641fe70f641fe60f62
1fe50f621fe40f641fe30f621fe20f621fe10f631fe00f641fdf0f641fde
0f641fdd0f641fdc0f641fdb0f641fda0e671fd90e681fd80e681fd70e68
1fd60e681fd50e671fd40e681fd30e681fd20e681fd10e671fd00e681fcf
0e681fce0e681fcd0e681fcc0e681fcb0e681fca0e681fc90e681fc80d6b
1fc70d6c1fc60d2a1fc50d6c1fc40d2c1fc30d6b1fc20d6c1fc10d6d1f40
ffc00d6a1fbf0d691fbe0d681fbd0d6b1fbc0d311fbb0d311fba0d311fb9
0c711fb80c721fb70c731fb60c741fb50c741fb40c741fb30c731fb20c74
1fb10d311fb00d311faf0d311fae0d311fad0d311fac0d311fab0d311faa
0d311fa90b7e1fa80b7a1fa70b791fa60b7a1fa50b7c1fa40b7d1fa30b7e
1fa20b7e1fa10b7e1fa00b7e1f9f0b7e1f9e0b7e1f9d0b7e1f9c0b7e1f9b
0b7e1f9a0b2d1f990b2d1f980aa71f970aa51f960aa71f950aa71f940aa7
1f930aa71f920a681f910a821f900a9b1f8f0a9d1f8e0a9f1f8d0aa71f8c
0aa71f8503251f8403381f8301381f8255805581ab80557f557d557eab7d
550b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557bab7a557955
775578ab7755ba028900660288403c5576ab755504751475747503f47501
ab750144750130750102007510752075030c7455725573ab725500725072
8072b072043bb072e072020072010ab8ffc0b3721b1e46b8ffc0407c720d
104671556f5570ab6f556e666d556a03251f6938675568ab675566386455
65ab645563386255613860555f385d555eab5d555c385a555bab5a555938
58555703251f5638545555ab54555338515552ab51554f384e554e03251f
4d384b554cab4b554a38485549ab4855473846554503381f001c101c201c
0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b04001bb01bc01b
03120f1a1f1a02290f1901434f19016f197f198f19030f18cf1802401829
2c460f17cf17df17ef1704134017292e460016101620160315b8ffc0b316
4d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc0404d162326460f15
010f151f1502451f15010011e011f0110315bf10cf10020f0f010f0fff0f
02400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d1f0d020f0d
1f0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02553f0b4f0b
02400b3f4346400b2d30460003012001010001100120010308b8ffc0b301
151f46b80100b316010501b80190b154532b2b4bb807ff524bb008505bb0
0188b02553b00188b040515ab00688b000555a5b58b101018e59b1010243
54b0144b515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb080
5358b0401d594bb0ff5358b0001db1160042592b5e7375732b2b745e732b
2b5e73742b73742b7374745e7301755e73742b2b2b2b5e732b5e732b7374
755e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e735f73737373742b
2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b185f5e000000>
[16233 8533 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 592 24 <00020058000004c5050e001800270064ba027d027e00582bb10102435558
b900000237400919201f100f100f091fb80105b2135120b80124b3400954
282b183f1a4ded3fed123939012fc63233d4ed31301bb3100f091fb80105
b2135120b80124b3400954282b183f1a4ded3fed12393931305901140e06
2321222e02371336363321321e0207342e0223230333323e0404c512273e
597596b881fee10d17100605e6072f1e011195c48341b629588971b4c9b2
7aa47e58381a033c418d8d887b684c2a07101b140482271f3f78ad7d4a7c
5933fc113b6586949b00>RDHAAA+Calibri,Italic AddT42Char 
2 10336 286 <0002004dffed039d03ca002e003c0087ba027f028000582bb10102435558
b62a323706040009b8020e400923110c1e031414232fb8020d4015002306
be37372a1e11110c32d12a4a0cdf401e4d282b183f1a4ded3fed11392f11
12392fed012fd4ed12392f173910ed11173931301b401306be37372a1e11
110c32d12a4a0cdf401e4d282b183f1a4ded3fed11392f1112392fed3130
5901140e022323060615141633323e0233321615140e02070e0323222e02
35343e0433321e0207342623220e020733323e02039d4088d4946a070563
6f40664b3009090904080d080c3d5464325986592c193656779c6254754b
22a9504a41644d371166698d552302e5456e4e2a213e1b646a1316130d0c
0a1c1d1a090c17130c28537c5441959286663e2a425137333f2d4c65381a
2d3c>RDHAAA+Calibri,Italic AddT42Char 
2 13528 396 <0001003ffffa02f203ca0033006cba027f028000582bb10102435558400a
2811111d121c001d1c0cb801184010402d4a121c11281d2706172249174c
282b183f3f1217393f1a4ded012f2fc411331133113331301bb9000c0118
4010402d4a121c11281d2706172249174c282b183f3f1217393f1a4ded31
305901140e0423222e0223220e0207030e0323222e0237133e0333321e02
07073e0333321e02171602f20304080c0d080813171e1422595647114f02
0a142118191f110502b3010a141d14151b0f040121173f4a512711231e17
0606039c04171e201b12070a073b688e53fe6f080b080404080b08038507
0c080303080c07a4294c3922050709060600>RDHAAA+Calibri,Italic AddT42Char 
3 522 455 <00010015fe9403a303bc00300068ba027f028000582bb10102435558b323
141329bb02100000002201fdb318180009b80223400e40132e492308141d
49144b0e4f282b183f3f3f1239393f012f1a4dedc4392fed10ed11393931
301b400c2e492308141d49144b0e4f282b183f3f3f1239393f3130590114
06070e0307010e032322262636371303262635343e0233321e021713333e
03373e0333321603a30405214e688b60fefd06121a25191b2312020bf495
0202071421181b1f11070175023e6454471f020b15241b2d1e03a40b170a
5bc5d7ea81fe9f080c0904050c140e0139036f0c14070b0f090303070e0a
fd2257b4b9bd61080b08030c>RDHAAA+Calibri,Italic AddT42Char 
2 0 0 <00050000fe7303da050e00030007003b00550056004fb52d162d16083c41
0a01ed00490007016400020020018c000800010164401204022537060351
1b0d117051015144070254003fdddedd5ddeddcd3fdddecd012fddedd6ed
10fdd6ed1239392f2f3130011121110111211101140e020707060623222e
02373736363333323e0235342e0223220e0223222635343e02373e033332
1e0201140e0207060623222e0235343e0237363633321e020103dafc5b03
4ffd06027b1f456e4e24021f1b0e140c050120051f17083d4f2e130f2135
2828402f1f070a060205080608293a4422445e3a1afeb503070b070a2016
161a0e0504070c0809201913190e04fe46050efaf2050efb43046cfb9403
313467523605980a0802040606bc1b17253b4621192b20130f13100c0e05
131612060713120b263d4afd8b08171a17070a0a070c100a091818160809
0a060c10fd38>RDHAAA+Calibri,Italic AddT42Char 
RDHAAA+Calibri,Italic /CharStrings get begin
/D 24 def
/e 286 def
/r 396 def
/y 455 def
end
RDHAAA+Calibri,Italic /Encoding get
dup 68 /D put
dup 101 /e put
dup 114 /r put
dup 121 /y put
pop
end
%ADOEndSubsetFont
/BNPBOS+Calibri,Italic /RDHAAA+Calibri,Italic findfont ct_VMDictPut
/BNPBOS+Calibri,Italic*1 
[68{/.notdef}rp /D 32{/.notdef}rp /e 12{/.notdef}rp /r 6{/.notdef}rp /y 
134{/.notdef}rp]
BNPBOS+Calibri,Italic nf
BNPBOS+Calibri,Italic*1 [12 0 0 -12 0 0 ]msf
225.235 77.5936 mo
(Dryer)
[7.42807 4.11603 5.24408 5.73596 0 ]xsh
%ADOBeginSubsetFont: RDHAAA+Calibri,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal RDHAAA+Calibri,Italic gcheck setglobal} if

2 0 3 <> RDHAAA+Calibri,Italic AddT42Char 
RDHAAA+Calibri,Italic /CharStrings get begin
/space 3 def
end
RDHAAA+Calibri,Italic /Encoding get
dup 32 /space put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BNPBOS+Calibri,Italic*1 
[32{/.notdef}rp /space 35{/.notdef}rp /D 32{/.notdef}rp /e 12{/.notdef}rp /r 
6{/.notdef}rp /y 134{/.notdef}rp]
BNPBOS+Calibri,Italic nf
BNPBOS+Calibri,Italic*1 [12 0 0 -12 0 0 ]msf
251.875 77.5936 mo
( )sh
%ADOBeginSubsetFont: RDHAAA+Calibri,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal RDHAAA+Calibri,Italic gcheck setglobal} if
2 3214 116 <000100dbfffa07820514003c00a5ba027d027e00582bb101024355584018
0d242f0b0b25250c0a303000003124180c310c31323c1823bb01b6001700
220230401c401837522a520a0d001723300b3c1822252f320d121d521255
0555282b183f3f3f1217393f3f012f1a4dedd6ed10c4323939192f182f12
391133113310cd1133113310cd113331301b401a37522a520a0d00172330
0b3c1822252f320d121d5212550555282b183f3f3f1217393f3f31305925
0e0323222e02270323010e0323222e022703263e0233321e02151333013e
0333321e02171333013e03333216160607052d06131e2a1d1f2a1a0c014d
02fe4605131a2b1f222c1b0c0167020311232019291206480201ee050d16
251f1b20120501520201f6040c17251c1d220e0609250e1109030309100d
03d4fc2e0e1109030309120e04af141a0d04040a120efbce043a0b0f0804
03090f0bfbc6043e0a0d0803050e1b16>RDHAAA+Calibri,Italic AddT42Char 
2 8050 258 <00020051ffed03e103ca0026003b008dba027f028000582bb10102435558
b3091d081eb801afb42627263b08b801aeb7000f260113032631b8021e40
171300093b271d26060321492af91a4a36f8400e4d034c282b183f3f1a4d
ed3fed3f121739012fedd45f5e5ddded33113310ed11393931301b401600
093b271d26060321492af91a4a36f8400e4d034c282b183f3f1a4ded3fed
3f12173931305925060623222e0237370e0323222e0235343e0433321617
37363633321e020707262623220e0415141e0233323e0237032c04242a14
1a100603210d445d723b50693e17152f4b6a8c59597f3213042628141b10
0401d32f6d44365743311f0f0b1f362b376f604a1219110e04070b09aa20
4c402a385c743d388e948c6f43483f5b100e03080c07ec454533546b726e
2c234539233d6c925800>RDHAAA+Calibri,Italic AddT42Char 
2 11462 346 <0001003ffffa03b005710041007dba027f028000582bb101024355584023
2e1924410b000a230b180b4134040513f940394a23190a00242e061e2946
1e4c054c282b183f3f3f1217393f1a4ded121739012f2fc4321133cd3332
31301b401a180b4134040513f940394a23190a00242e061e29461e4c054c
282b183f3f3f1217393f1a4ded121739313059250e0323222e0237133636
35342e0223220e0207030e0323222e0237013e0333321e0207030e03073e
0333321e02151406070331020a152019181f1105016f05070c1b2b1f356f
5f4b1150020a142118191f110502010a0209152119181f11040150050e0f
0f0610445c6f3b405a391a080719080b080404080b08022c1a41181d3023
143e6d9455fe71080b080404080b080538080c080404080c08fe691a3635
3012234b3f2a25415a3424442300>RDHAAA+Calibri,Italic AddT42Char 
2 11776 349 <0002003ffffa01ef052f00130029006aba027f028000582bb10102435558
b4291f141e00b80262400b0a1f1e1e141f290424190fb80147b605402449
194c282b183f3f1ade4ded11121739012fd6d4ed1133113331301bb71e14
1f290424190fb80147b605402449194c282b183f3f1ade4ded1112173931
3059010e0323222e02373e0333321e02010e0323222e0237133e0333321e
020701e905111c2a1e1d2612020506121b2a1e1d251302fef7020a142118
191f110502b3010a142119181f11050104cc1c26170a0a17261c1c251909
091925fb31080b080404080b080384070c080404080c0700>RDHAAA+Calibri,Italic AddT42Char 
2 13786 400 <00010009ffed02eb03ca004600adba027f028000582bb10102435558bc00
0f01fd003b0034020e402b163b163b1600230f34401b45cf282005300540
0503050acf404a20f928002a102a020c032a2fde401b4d282b183f1a4dfd
d4005f5e5d2bed3ffdd4005d2bed11123939012fc439392f2f10ed10ed31
301b40240f34401b45cf2820053005400503050acf404a20f928002a102a
020c032a2fde401b4d282b183f1a4dfdd4005f5e5d2bed3ffdd4005d2bed
1112393931305901140e0223222e0223220e0215141e0415140e0223222e
0227262635343e0433321e0233323e0235342e0435343e0233321e021716
02eb060b0f090c2130432e2c442e1835505d4f353767925a2f5343300d08
070206070a0a070c2237523d374f3419344f5c4f35345f855126473c2c0b
0b036c0a212016131814192b371e28352a293b533f467957310e161b0c08
110c08161816120b1b1f1b1b2d3c212a352b2a3953404271532e0c12160b
0a00>RDHAAA+Calibri,Italic AddT42Char 
RDHAAA+Calibri,Italic /CharStrings get begin
/W 116 def
/a 258 def
/h 346 def
/i 349 def
/s 400 def
end
RDHAAA+Calibri,Italic /Encoding get
dup 87 /W put
dup 97 /a put
dup 104 /h put
dup 105 /i put
dup 115 /s put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BNPBOS+Calibri,Italic*1 
[32{/.notdef}rp /space 35{/.notdef}rp /D 18{/.notdef}rp /W 9{/.notdef}rp /a 
3{/.notdef}rp /e 2{/.notdef}rp /h /i 8{/.notdef}rp /r /s 
5{/.notdef}rp /y 134{/.notdef}rp]
BNPBOS+Calibri,Italic nf
BNPBOS+Calibri,Italic*1 [12.024 0 0 -12.024 0 0 ]msf
208.635 101.374 mo
(Dish Washer)
[7.43091 2.64523 4.55716 6.22855 2.64523 10.3166 6.22852 4.55719 6.22855 5.74744 0 ]xsh
BNPBOS+Calibri,Italic*1 [12.024 0 0 -12.024 0 0 ]msf
269.375 101.374 mo
( )sh
%ADOBeginSubsetFont: RDHAAA+Calibri,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal RDHAAA+Calibri,Italic gcheck setglobal} if
2 2550 87 <00020052fffa0428050e001f002f0082ba027d027e00582bb10102435558
b900000237400c201328080927092709141328b80103b71417130908080e
27b80104b54017510e55282b183f3f1a4ded12392f39391239ed012fcd33
32107d87c4c4011810d4ed31301bb900280103b71417130908080e27b801
04b54017510e55282b183f3f1a4ded12392f39391239ed31305901140e04
2323030e0323222e023713363633333216171e0307342627262623230333
323e040428193653769968b25d020a1721191720130702ee083221ff324d
2436573c20b63d40183a21a266a347624a33200f03de35746f634c2bfe2d
070c070504070c0804ab282207080c3249604c3e59120704fdf92034464b
4d00>RDHAAA+Calibri,Italic AddT42Char 
2 3006 115 <000100c1fffa0508051400220061ba027d027e00582bb10102435558401c
0017221716160a150a180b1d52000a1617220b1518080510520555282b18
3f3f1217393f012fc439331133113332113331301b40111d52000a161722
0b1518080510520555282b183f3f1217393f313059250e0323222e022703
263e0233321e02171333013e03333216160607026007101a281e202a180b
01b7030111231f1e2314070297010241050d16251e1f240e060c1e0b0e08
0303080f0b04ba13180c0403080e0afbc004410a0d0803050e1b1600>RDHAAA+Calibri,Italic AddT42Char 
2 8360 271 <0002003dffed03d00571002d0042009cba027f028000582bb10102435558
40120b111d1e1f20233738391c391c1239111200b8021e401c2e110a3938
22040733f9274a1c12110b040e17460e4c3cf840074d282b183f1a4ded3f
3f1217393fed121739012fd4ed2f11331133107d870ec4c4c4c4c4c4c412
013931301b401a0a393822040733f9274a1c12110b040e17460e4c3cf840
074d282b183f1a4ded3f3f1217393fed12173931305901140e0423222627
07060623222637013e0333321e0207030e03073e0333321e0407342e0223
220e020707161633323e0403d016314a6b8b575a8032120227282a1c0401
0a0209152119181e12040150050e0f0f0610455d6e383c563c251408ad0a
1d372e3670604b11212f6c4434544432211102843c91938b6b4144405811
0e100f0538080c080404080c08fe6e1a38373112234b3f2a20354448472c
1b463c293e6d9357a645423050677172>RDHAAA+Calibri,Italic AddT42Char 
2 8706 272 <0001004cffed035603c900350087ba027f028000582bb10102435558b31c
1c0011b8021e401d2834f7281f0501050af62f4a20f62800191019020a03
1914fa40254d282b183f1a4dfdd4005f5e5d2bed3ffdd4005d2bed012fed
c4392f31301b401c34f7281f0501050af62f4a20f62800191019020a0319
14fa40254d282b183f1a4dfdd4005f5e5d2bed3ffdd4005d2bed31305901
140e0223222e0223220e0415141633323e0233321615140e062322263534
3e0433321e040356070e130c0e1e314b3a406349301e0d5a59415d412a10
080904090d183c4f5c31a19f15324e729661284a41351d07034e12262116
1d241e35556c6e6726676a2029200f0e0c21231e19241d13a4a23d91938a
6b400d16211a1200>RDHAAA+Calibri,Italic AddT42Char 
2 12120 367 <0001003ffffa01f1057100150047ba027f028000582bb101024355584010
15000b400a000a150b04051046054c282b183f3f121739012f1acd333231
301b400b000a150b04051046054c282b183f3f121739313059370e032322
2e0237013e0333321e0207e6020a142118191f110502010a020915211918
1f11040119080b080404080b080538080c080404080c0800>RDHAAA+Calibri,Italic AddT42Char 
2 12264 373 <0001003ffffa05e703ca005b00a7ba027f028000582bb101024355584039
442d2d2e39171622214e225b005b0b000a0113030a38220b534a1128f940
494a382e21170a00162d0b225b4e44390e333e49334c1c4c054c282b183f
3f3f3f1217393f1a4dfdc43f012f2f2fc45f5e5d113332111239c4113332
c63332113331301b4021534a1128f940494a382e21170a00162d0b225b4e
44390e333e49334c1c4c054c282b183f3f3f3f1217393f1a4dfdc43f3130
59250e0323222e023713363635342623220e0207030e0323222e02371336
3635342623220e0207030e0323222e0237133e0333321e0207073e033332
1e02173e0333321e02151406070567010a152118181f1106026f0507313d
326b604a1150020a152118181f1006016f0705323c336a604a1150020a14
2118191f110502b50109131d14151b0f0401220f455c6d393c56371a0314
465c6c38435a3818080719080b080404080b08022c1d341a404c3d6b9356
fe6e080b080404080b08022c1e3a193d493d6b9356fe6e080b080404080b
080385070c080303080c07ac224c402a21394f2f234c3f2a264258342344
2400>RDHAAA+Calibri,Italic AddT42Char 
2 12980 381 <0002004effed03d103ca0017002f0058ba027f028000582bb10102435558
b90000021f4009001810180213031824b8021e400b0c1df5134a29e34007
4d282b183f1a4ded3fed012fedd45f5e5ded31301b400a1df5134a29e340
074d282b183f1a4ded3fed31305901140e0423222e0235343e0433321e02
07342e0223220e0415141e0233323e0403d11c395877975d6089582a1b3a
5777975d6089592aae15314f383c624d39251216314e383d614d39251202
734a9a8f7e5e372e5880514a9a8e7f5e372f58805a3250371e2b49626f75
383250381e2b4a627074>RDHAAA+Calibri,Italic AddT42Char 
2 14732 410 <00010071ffef02c504ad0045008aba027f028000582bb101024355584029
362c2b372b42080941094137092b2b30371737170030424837413c082ce3
092b2136480ff840214d282b183f1a4ded3f123939ed32cd39393f012fcd
39392f2f123911331133107d87c4c41087c4c431301b4013424837413c08
2ce3092b2136480ff840214d282b183f1a4ded3f123939ed32cd39393f31
305901140e04232303060615141633323e0233321615140e02070e032322
2e0235343e02371323222635343e023333373e0333321e02070733321602
c502060a0b0e09e66504062b301b281d1608080905080c0708202a2f1738
52381b02050503657d0b0c060c130d7e2b010b142118181f1105012be60f
0a039309151616110afe0a153411332f090a090b0f0d1f1e1807070e0b06
18334d360c1d20200e01fa0d130e252016d6070c090404090c07d616>RDHAAA+Calibri,Italic AddT42Char 
3 0 437 <00010070ffed03e203bc003c0075ba027f028000582bb101024355584022
0b1800313c323123241918000b18243119233c32090537491e492cf84010
4d054c282b183f3f1a4ded3f3f121739012fcd3332c4c432113311393130
1b4017000b18243119233c32090537491e492cf840104d054c282b183f3f
1a4ded3f3f121739313059250e0323222e0237370e0323222e0235343637
133e0333321e020703060615141e0233323e0237133e0333321e0207032c
010a121d15141b0f05022110455d6f39445d391909076f020a152118181f
1105016e06060b1b2b1f356f604b124f010b152118181f11050119080c07
0404070c08a9224b4028254159352145230234070c080303080c07fdd21a
381d1e3124143d6c9558018e070c080303080c07>RDHAAA+Calibri,Italic AddT42Char 
RDHAAA+Calibri,Italic /CharStrings get begin
/P 87 def
/V 115 def
/b 271 def
/c 272 def
/l 367 def
/m 373 def
/o 381 def
/t 410 def
/u 437 def
end
RDHAAA+Calibri,Italic /Encoding get
dup 80 /P put
dup 86 /V put
dup 98 /b put
dup 99 /c put
dup 108 /l put
dup 109 /m put
dup 111 /o put
dup 116 /t put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BNPBOS+Calibri,Italic*1 
[32{/.notdef}rp /space 35{/.notdef}rp /D 11{/.notdef}rp /P 5{/.notdef}rp /V 
/W 9{/.notdef}rp /a /b /c /.notdef /e 2{/.notdef}rp 
/h /i 2{/.notdef}rp /l /m /.notdef /o 2{/.notdef}rp 
/r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
BNPBOS+Calibri,Italic nf
BNPBOS+Calibri,Italic*1 [12 0 0 -12 0 0 ]msf
196.635 125.614 mo
(Portable Vacuum)
[5.99997 6.22803 4.11603 3.80408 6.22809 6.22809 2.63995 5.73596 2.66397 6.24002 6.22809 5.02798 
6.22809 6.22812 0 ]xsh
BNPBOS+Calibri,Italic*1 [12 0 0 -12 0 0 ]msf
279.935 125.614 mo
( )sh
%ADOBeginSubsetFont: CBIAAA+Calibri,Italic Initial
ct_T42Dict begin
-0.723 -0.273 1.258 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /CBIAAA+Calibri,Italic
Type42DictBegin
[<00010000000c000c000c000c4f532f32f9dfd825000000cc000000606376
7420ba7ecec70000012c000005146670676da1ea42ac0000064000000913
676c796683ac345600007e14000060bc68656164ed75069500000f540000
0036686865610da913bc00000f8c00000024686d74789025325f00000fb0
000030fa6c6f636185c76c44000040ac00001eda6d61787019d412410000
5f88000000206e616d65ceff477300005fa800000d68707265705fc3ffe0
00006d1000001102676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
0202040a0204e00002ff4000acff00000001000000004d53202000010000
207f0600fe0001c4079e02262000019f0000000003bd0511000000200003
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
00000000000000000000004a004c00540055005600570059004f004e004f
00500051004d005d005f00610063006400650066006700680069006a006b
006c006d006e006d0066006f007000710072007300740075007600710074
00700071007200740075007600780079007a007d00780079007a007b007c
007d0079007c007a007c007d007e007f00800081007e007f008000810082
007f008000810082007e007f008000810082008300850083008400850086
008700880089008600880089008300840085008600870088008900830084
00850086008700880089008a008b008c008d008e008f008a008b008c008d
008f008a008b008c008d008e008f008a008b008c008d008e008f00900095
00900091009200930094009500980099009a009b009c0090009100930096
0097009b009c009f00a20094009600900091009200930094009500960097
00980099009a009b009c009d009e009f00a000a100a200a300a600a70090
00910092009300940095009600980099009f00bc00bd00c100c600be00bf
00bf00c100c200b900be00c200df00e000e400e700e800e9012b01360147
00f200f400cf00640066006a006c006d0070006c006d0069006c00670073
00740075007600770078007a007b007c007d007e00810084008500860087
00880089008a0076007a007b007c007e007f008000820083008400870088
0089008a0077008500870079008200840085008600870088008a0079007a
007c007d007e0081008300840086008700880089008b008c008d008e008f
00900091009200940095008b008c008d008e008f0093009400950093008b
008c008d008e00900091009200930094008c008d008e008f009000910092
009300940095009700980099009a009b009c0096009700980099009a009b
009c009a009c009600980099009a009b009c00960097009b009c009d009e
009f00a000a100a2009d009e009f00a000a100a200a1009d009e009f00a0
00a100a2009d009e009f00a000a100a200a300a500a300a400a500a600a7
00a300a500a300a400a500a600a700a300a400a500a600a700a800a900a8
00a900aa00ab00ac00a800ab00ac00a800a900aa00ab00ac00a800a900aa
00ab00ac00ad00ae00af00b000b100b300b500b600b700b800af00b000b1
00b300b400b700ad00ae00af00b000b100b200b300b400b500b600b700b8
00ad00ae00af00b000b100b200b300b400b500b600b700ba00bb00bc00bd
00bf00c000c100c200c300c400ba00bb00bf00c300b900ba00bb00bc00bf
00c100c200c300ba00bc00bf00c200c700c900cb00cc00cd00c500c600c7
00c600c700cb00ce00cf00d100d200db00dc00de00df00e000e400d600e8
00e90123012b00d000d1042600d8050e010503c000c2024e0078042600d7
02990092000005e4000e40465f5e5d5c5b5a59585554535251504f4e4d4c
4b4a494847464544434241403f3e3d3c3b3a39383736352f2e2d2c282625
2423221f181411100f0d0b0a090807060504030201002c4523466020b026
60b004262348482d2c452346236120b02661b004262348482d2c45234660
b0206120b04660b004262348482d2c4523462361b0206020b02661b02061
b004262348482d2c45234660b0406120b06660b004262348482d2c452346
2361b0406020b02661b04061b004262348482d2c0110203c003c2d2c2045
2320b0cd442320b8015a51582320b08d44235920b0ed51582320b04d4423
5920b0042651582320b00d44235921212d2c20204518684420b001602045
b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d
2c00b0282370b101283e01b0282370b10228453ab10200080d2d2c2045b0
0325456164b050515845441b2121592d2c2045b0004360442d2c01b00643
b00743650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c6423
64615c58b00361592d2c8a03458a8a87b0112bb0292344b0297ae4182d2c
4565b02c234445b02b23442d2c4b525845441b2121592d2c01b005251023
208af500b0016023edec2d2c01b005251023208af500b0016123edec2d2c
01b0062510f500edec2d2c20b001600110203c003c2d2c20b00161011020
3c003c2d2c00b00743b006430b2d2c21210c6423648bb84000622d2c21b0
8051580c6423648bb82000621bb200402f2b59b002602d2c21b0c051580c
6423648bb81555621bb200802f2b59b002602d2c0c6423648bb840006260
23212d2c4523456023456023456023766818b08062202d2cb00426b00426
b00425b0042545234520b003266062636820b0032661658a2344442d2c20
45b0005458b040442045b04061441b2121592d2c45b1302f4523456160b0
016069442d2c4b5158b02f2370b01423421b2121592d2c4b515820b00325
45695358441b2121591b2121592d2c45b01443b0006063b0016069442d2c
b02f45442d2c452320458a60442d2c45234560442d2c4b235158b90033ff
e0b134201bb3330034005944442d2cb0164358b00326458a586466b01f60
1b64b020606620581b21b04059b001615923586559b02923442310b029e0
1b2121212121592d2cb0164358b004254564b020606620581b21b04059b0
016123586559b0292344b00425b00725082058021b0359b0052510b00425
2046b0042523423cb0072510b006252046b00425b0016023423c2058011b
0059b0052510b00425b029e0b0072510b00625b029e0b00425b007250820
58021b0359b00425b003254348b00625b00325b0016043481b2159212121
212121212d2cb0164358b004254564b020606620581b21b04059b0016123
581b6559b0292344b00525b00825082058021b0359b0042510b005252046
b0042523423cb00425b0072508b0072510b006252046b00425b001602342
3c2058011b0059b0042510b00525b029e0b02920456544b0072510b00625
b029e0b00525b00825082058021b0359b00525b003254348b00425b00725
08b00625b00325b0016043481b2159212121212121212d2c02b004252020
46b004252342b0052508b003254548212121212d2c02b0032520b0042508
b0022543482121212d2c452320451820b00050205823652359236820b040
505821b04059235865598a60442d2c4b53234b515a5820458a60441b2121
592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d
2cb000214b5458381b2121592d2cb002435458b0462b1b21212121592d2c
b002435458b0472b1b212121592d2cb002435458b0482b1b21212121592d
2cb002435458b0492b1b212121592d2c208a08234b538a4b515a5823381b
2121592d2c0020b200400325b0062649618b3812342d2c01462346602346
6123201020468a61b8ff80628ab140408a704560683a2d2c208a2349648a
2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b54422d2cb102
0042b123018851b1400188535a58b910000020885458b202010243604259
b12401885158b920000040885458b2020202436042b12401885458b20220
02436042004b014b5258b2020802436042591bb940000080885458b20204
0243604259b94000008063b80100885458b202080243604259b940000100
63b80200885458b202100243604259b94000020063b80400885458b20240
0243604259595959592d2c451868234b51582320452064b04050587c5968
8a6059442d2cb00016b00225b0022501b001233e00b002233eb10102060c
b00a236542b00b234201b001233f00b002233fb10102060cb006236542b0
072342b00116012d2c20b82000628a6023622d2cb0072558001b0159b004
2510b00325b0022520b8ffff545821cd1bed5921b006255cb006255a58b0
092b5920b005254ab0042547b004254760b0062547b0806361b00225b000
5558b00325b00725496359b0082558001b0159b00425b0062549b009255c
b009255a58b0092b59b0072546b0806361b0032520b0005558631b215961
2320b0005558b080631b21b08059b0592bb006255c586959b00425202010
b00048233ab0062658001b0159b0052658b003252f598a12233221212d2c
b00625b00a2587b00625b009254ab0005358b00625b00a251bb00925b007
2559b00225b00225070cb005256323b00625636020b94000040063535821
b00426b00426b00a1bb94000040063655158b0042665b0042665b00a1bb0
0426b00426b000b00325b003250b0d0ab0092eb00725b007250b0d0ab00b
2eb00525b0052507595920b0005558b00525b0052587b00725b007250bb0
092510b00b25b0092620b8ffff545821cd1bed59b00525b0052507b00825
b00b254923b00625b0062587b00a2510b00b25c15920b00051b800522378
b00161b00225b00725b0072507b00a25b00d254961b08062b00525b00525
0bb00a252338b00625b0062587b00825b008250bb00a2510b00b25c4b006
25b0062507b00925b00c2549b0032554b8ffa72379212121212121212121
2121212d2c23b0005458b9400000001bb900004000598ab0005458b94000
00001bb90000400059b05b2b2d2c08b0005458b9400000001bb900004000
590db05b2b2d2c8a8a080d8ab0005458b9400000001bb90000400059b05b
2b2d2cb00426b00426080db00426b00426080db05b2b2d00000100000005
dc2972f5441b5f0f3cf50019080000000000bbeb7ccc00000000ce0d62a1
fa34fdcb0a140836000200090002000000000000000100000600fe0001c4
0aa0fa34fa0b0a140800019a0000000000000000000000000911040e0000
000000000000000001cf0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000042e0073000000000000000000000000000000000000
000004ec0058000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000003ad
0052050c006e0000000000000000000000000000000004fc005200000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000035d0058000000000000000000000000000000000000000006d7
0052000000000000000000000000000000000000000000000000053c0072
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000004220052000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000003e600a30000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000048a00c1071f00db00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000003f4ffb700000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000404004903ab00690000000000000000000000000000000000000000
0465004c0000000000000000000000000380004d00000000000000000000
000000000000000000000000000000000000000000000000000003500047
0482006b0000000000000000000000000000000004760047000000000000
000001ec0047000000000000000000000000000000000000000000000000
0000000001ec001100000000000000000000000000000000000000000000
000002e0004d000000000000000000000000000000000000000006060046
047900460000000000000000000000000000000000000000049900600000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000003c20047000000000000000003e700470000
00000000000000000000033f000200000000000000000000000000000000
00000000035900800000000000000000000000000485007d000000000000
000000000000000000000000000000000000000000000000000000000000
0000000003ed0095061e00a6000000000000000000000000000000000000
0000037e0086000000000000000000000000000000000000000000000000
0000000000000000041d0051000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
041d003d0354004c00000000000000000000000000000000000000000746
004c0000000005f1004c00000000041d0051000000000000000000000000
03d2004d0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000041d0042000000000000
0000000000000000000003c4ffbd00000000000000000000000000000000
041d003f000000000000000001d6003f0000000000000000000000000000
00000000000000000000000000000000000001d6003f0000000000000000
00000000000000000000000000000000000000000000000001d6003f0000
0000000000000000000000000000000000000654003f041d003f00000000
0000000000000000000000000000000000000000041b004e000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000041dfff8000000000000000002be003f000000000000
000000000000031d00090000000000000000000000000000000000000000
05a5000900000000000000000000000002ae007100000000000000000000
000000000000047500710000000000000000000000000000000000000000
00000000000000000000000000000000051300710000000006d900710000
000000000000000000000000000000000000000000000000000000000000
00000000041d007000000000000000000000000000000000000000000000
0000000000000000000000000000000000000391007c0000000000000000
000000000000000000000000000000000394001500000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000002d800aa02d5009f024100a602d800aa02a100a80000000002d8
00a702da009f016200a20000000000000000015e00a0044c00a002db00a0
02d600aa02d700760000000001f000a00230008301e300bb02db00c10285
00c300000000000000000286008f00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000001ce00000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000029b00bb00000000000000000000000000000000000000000000
00000260009b000000000000000000000000000000000000000000000000
000000000585004900000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000033500f70000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000003de0039
000000000000000003c4ffbd000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000002fb00cb034b00b900000000
02a800b8034400d5035b00c2000000000000000000000000025b00c8046d
00bc00000000037500cb02d800c1000000000000000000000000025700ba
00000000032300ef044500e5000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000034b00b9000000000000
0000034400d5035b00c2000000000000000000000000025b00c8046d00bc
0000000000000000037500cb0000000002d800c100000000025700ba0000
0000044500e5000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a80128012801280128012801280196019601960196019601960196
0196019601960196019601960196022102de02de02de02de02de03830383
038303830383038303830383038303830383038303830383038303830383
038303dc03dc03dc03dc03dc03dc048d048d048d048d048d048d048d04fb
04fb04fb04fb04fb04fb04fb04fb04fb04fb04fb04fb0583058305830583
05830583058305830583058305830583058305df05df05df05df05df05df
05df05df05df05df05df05df05df05df05df064706f406f406f406f406f4
06f406f406f406f406f406f406f406f406f406f4075d075d075d075d075d
075d075d075d075d075d075d075d075d07de085408540854085408540854
08a708a708a708a7090d090d090d090d090d090d090d090d090d090d096a
09f209f209f209f209f20a6b0a6b0a6b0aa20aa20aa20aa20aa20aa20aa2
0aa20aad0aad0aad0aad0aad0aad0aad0af10af10af10af10af10af10b7a
0bf70bf70bf70bf70bf70bf70c510c510c510c510c510c510c510c510c51
0c510c510c510cb90cb90cb90d490d490d490d490dd70dd70dd70dd70dd7
0dd70e260e260e260e260e830e830e830e830e830e830e830e830e830e83
0e830ed80f620f620f620f620f620f620fb90fb90fb90fb90fb90fb90fb9
0fb90fb91054105410541054105410541054105410541054105410541054
1101118c118c118c118c118c118c12921292139313931430143014301430
14c714c714c714c714c714c714c714c714c714c714c714c714c714c714c7
14c714c714c714c714c714c714c714c714c714c714c714c714c714c714c7
14c714c714c714c714c714c714c714c714c714c714c714c714c714c714c7
14c714c714c714c714c71590159015901590159016631663166316631663
17001700170017751775177517751775177517751775177517ac17ac17ac
17ac17ac17ac17ac17ac17ac17f417f417f417f417f417f418c7195a195a
195a195a195a195a195a19c819c819c819c819c819c819c819c819c819c8
19c819c81a6c1a6c1a6c1aed1aed1aed1aed1ba21ba21ba21ba21ba21ba2
1cc61cc61cc61cc61d6a1d6a1d6a1d6a1d6a1e071e071e071e071e071e07
1e071e071e071e071ecb1ecb1fb41fb41fb41fb41fb41fb41fb41fb41fb4
1fb42045204520452045204520452045204520452045204520b920b920b9
20b920b920b920b921372137213721372137213721372137213721372137
213721a7222b2292230d238e238e242a24a9250225022502253a25e02652
269d2722272227842809288928fd295f295f295f29ca29ca29ca29ca29ca
29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca
29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca
29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca29ca
29ca29ca29ca29ca29ca29ca29ca29ca29ca29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff29ff
29ff2a642a642a642a642a642a642a642ac82ac82ac82ac82ac82ac82ac8
2ac82b452b452b452b452b452b452b452b452b452b452b452b452b452b45
2b452b452b452b452b452b452b452b452b452b452b452b452b452b452b45
2b452b452b452b452b452b452b452b452b452b452b452b452b452b452b45
2b452b452b452b452b452b452b452b452b452b452b452b452b452b452b45
2b452b452b452ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba1
2ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12ba12c1c
2c1c2c1c2c242c242c242c242c242c242c242c242c242c242c242c242c24
2c242c242c242c242c242c242c242c242c242c242c242c242c822c8a2c8a
2ccc2cd42cdc2cdc2cdc2cdc2ce42cec2cec2cf42cfc2cfc2cfc2cfc2d04
2d042d412d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d492d492d492d492d492d492d492d492d492d49
2d492d492d492d492d492d922d922d922e092e5f2e5f2e5f2e5f2e972f03
2f032f032f572f572fa92fa92fea2fea305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e305e305e305e305e305e305e305e305e305e305e305e305e305e
305e305e0000000100000f6c00a10005006c000300020010002f00600000
09ed1102000200010000002d022200000003000000000064000000000003
00000001000e00640000000300000002000c032a00000003000000030032
03040000000300000004001c031a00000003000000050018033600000003
00000006001c034e00000003000000070076036a0000000300000008002a
000e0000000300000009002003e0000000030000000a02a0006400000003
0000000b00560400000000030000000c002a0456000000030000000d0298
0480000000030000000e006c071800010000000000000032078400010000
00000001000707b600010000000000020006091900010000000000030019
09060001000000000004000e09110001000000000005000c091f00010000
00000006000e092b0001000000000007003b093900010000000000080015
078b000100000000000900100974000100000000000a015007b600010000
0000000b002b0984000100000000000c001509af000100000000000d014c
09c4000100000000000e00360b1000030001040900000064000000030001
04090001000e00640003000104090002000c032a00030001040900030032
03040003000104090004001c031a00030001040900050018033600030001
04090006001c034e00030001040900070076036a0003000104090008002a
000e0003000104090009002003e0000300010409000a02a0006400030001
0409000b00560400000300010409000c002a0456000300010409000d0298
0480000300010409000e006c071800a9002000320030003100330020004d
006900630072006f0073006f0066007400200043006f00720070006f0072
006100740069006f006e002e00200041006c006c00200052006900670068
00740073002000520065007300650072007600650064002e00430061006c
0069006200720069002000690073002000610020006d006f006400650072
006e002000730061006e0073002000730065007200690066002000660061
006d0069006c00790020007700690074006800200073007500620074006c
006500200072006f0075006e00640069006e006700730020006f006e0020
007300740065006d007300200061006e006400200063006f0072006e0065
00720073002e002000490074002000660065006100740075007200650073
0020007200650061006c0020006900740061006c006900630073002c0020
0073006d0061006c006c00200063006100700073002c00200061006e0064
0020006d0075006c007400690070006c00650020006e0075006d00650072
0061006c00200073006500740073002e0020004900740073002000700072
006f0070006f007200740069006f006e007300200061006c006c006f0077
0020006800690067006800200069006d007000610063007400200069006e
002000740069006700680074006c007900200073006500740020006c0069
006e006500730020006f0066002000620069006700200061006e00640020
0073006d0061006c006c0020007400650078007400200061006c0069006b
0065002e002000430061006c0069006200720069002700730020006d0061
006e0079002000630075007200760065007300200061006e006400200074
006800650020006e00650077002000720061007300740065007200690073
006500720020007400650061006d00200075007000200069006e00200062
00690067006700650072002000730069007a0065007300200074006f0020
00720065007600650061006c002000610020007700610072006d00200061
006e006400200073006f0066007400200063006800610072006100630074
00650072002e004d006900630072006f0073006f00660074003a00200043
0061006c00690062007200690020004900740061006c0069006300560065
007200730069006f006e00200035002e0038003600430061006c00690062
00720069002d004900740061006c0069006300430061006c006900620072
006900200069007300200061002000740072006100640065006d00610072
006b0020006f006600200074006800650020004d006900630072006f0073
006f00660074002000670072006f007500700020006f006600200063006f
006d00700061006e006900650073002e004c007500630028006100730029
002000640065002000470072006f006f00740068007400740070003a002f
002f007700770077002e006d006900630072006f0073006f00660074002e
0063006f006d002f007400790070006f006700720061007000680079002f
006300740066006f006e007400730068007400740070003a002f002f0066
006f006e007400660061006200720069006b002e0063006f006d0059006f
00750020006d006100790020007500730065002000740068006900730020
0066006f006e00740020006100730020007000650072006d006900740074
006500640020006200790020007400680065002000450055004c00410020
0066006f00720020007400680065002000700072006f0064007500630074
00200069006e002000770068006900630068002000740068006900730020
0066006f006e007400200069007300200069006e0063006c007500640065
006400200074006f00200064006900730070006c0061007900200061006e
00640020007000720069006e007400200063006f006e00740065006e0074
002e00200059006f00750020006d006100790020006f006e006c00790020
00280069002900200065006d006200650064002000740068006900730020
0066006f006e007400200069006e00200063006f006e00740065006e0074
0020006100730020007000650072006d0069007400740065006400200062
0079002000740068006500200065006d00620065006400640069006e0067
0020007200650073007400720069006300740069006f006e007300200069
006e0063006c007500640065006400200069006e00200074006800690073
00200066006f006e0074003b00200061006e006400200028006900690029
002000740065006d0070006f0072006100720069006c007900200064006f
0077006e006c006f006100640020007400680069007300200066006f006e
007400200074006f002000610020007000720069006e0074006500720020
006f00720020006f00740068006500720020006f00750074007000750074
002000640065007600690063006500200074006f002000680065006c0070
0020007000720069006e007400200063006f006e00740065006e0074002e
0068007400740070003a002f002f007700770077002e006d006900630072
006f0073006f00660074002e0063006f006d002f007400790070006f0067
00720061007000680079002f0066006f006e00740073002f006400650066
00610075006c0074002e0061007300700078a92032303133204d6963726f
736f667420436f72706f726174696f6e2e20416c6c205269676874732052
657365727665642e43616c696272692069732061206d6f6465726e207361
6e732073657269662066616d696c79207769746820737562746c6520726f
756e64696e6773206f6e207374656d7320616e6420636f726e6572732e20
4974206665617475726573207265616c206974616c6963732c20736d616c
6c20636170732c20616e64206d756c7469706c65206e756d6572616c2073
6574732e204974732070726f706f7274696f6e7320616c6c6f7720686967
6820696d7061637420696e2074696768746c7920736574206c696e657320
6f662062696720616e6420736d616c6c207465787420616c696b652e2043
616c696272692773206d616e792063757276657320616e6420746865206e
65772072617374657269736572207465616d20757020696e206269676765
722073697a657320746f2072657665616c2061207761726d20616e642073
6f6674206368617261637465722e4d6963726f736f66743a2043616c6962
7269204974616c696356657273696f6e20352e383643616c696272692d49
74616c696343616c6962726920697320612074726164656d61726b206f66
20746865204d6963726f736f66742067726f7570206f6620636f6d70616e
6965732e4c7563286173292064652047726f6f74687474703a2f2f777777
2e6d6963726f736f66742e636f6d2f7479706f6772617068792f6374666f
6e7473687474703a2f2f666f6e7466616272696b2e636f6d596f75206d61
7920757365207468697320666f6e74206173207065726d69747465642062
79207468652045554c4120666f72207468652070726f6475637420696e20
7768696368207468697320666f6e7420697320696e636c7564656420746f
20646973706c617920616e64207072696e7420636f6e74656e742e20596f
75206d6179206f6e6c792028692920656d626564207468697320666f6e74
20696e20636f6e74656e74206173207065726d6974746564206279207468
6520656d62656464696e67207265737472696374696f6e7320696e636c75
64656420696e207468697320666f6e743b20616e6420286969292074656d
706f726172696c7920646f776e6c6f6164207468697320666f6e7420746f
2061207072696e746572206f72206f74686572206f757470757420646576
69636520746f2068656c70207072696e7420636f6e74656e742e68747470
3a2f2f7777772e6d6963726f736f66742e636f6d2f7479706f6772617068
792f666f6e74732f64656661756c742e6173707800>
<b10903b8027ab21e3e1fb80279b21e3e1fb80278b21e0b1fb80277b21e0b
1fb80276b21e3a1fb80275b21e3a1fb80274b21e3e1fb80273b21e3b1fb8
0272b21e3c1fb80271b21e3c1fb80270b21e3c1fb8026fb21e3d1fb8026e
b21e3d1fb8026db21e3e1fb8026cb21e3e1fb8026bb21d411fb8026ab21d
411fb80269b21d421fb80268b21d431fb80267b21d431fb80266b21d431f
b80265b21d431fb80264b21d431fb80263b21d411fb80262b21d421fb802
61b21d421fb80260b21d431fb8025fb21d431fb8025eb21c451fb8025db2
1c451fb8025cb21c451fb8025bb21c451fb8025ab21c451fb80259b21c45
1fb80258b21c451fb80257b21c451fb80256b21c451fb80255b21c451fb8
0254b21c451fb80252b21c451fb80251b21c451fb80250b21c451fb8024f
b21c451fb8024eb21c441fb8024db21c451fb8024cb21c451fb8024bb21c
451fb8024ab21c451fb80249b21c451fb80248b21c451fb80247b21c451f
b80246b21c451fb80245b21c451fb80244b21b491fb80243b21b4a1fb802
42b21b4a1fb80241b21b4a1fb80240b21b4b1fb8023fb21b4b1fb8023eb2
1b4c1fb8023db21b4c1fb8023cb21b4c1fb8023bb21b4c1fb8023ab21b4c
1fb80253b21b4c1fb80239b21b491fb80238b21b491fb80237b21b4a1fb8
0236b21b4a1fb80235b21b4a1fb80234b21b4b1fb80233b21b4b1fb80232
b21b4c1fb80231b21b4c1fb80230b21b4c1fb8022fb21b4c1fb8022eb21b
4c1fb8022db21b491fb8022cb21b4a1fb8022bb21b4b1fb8022ab21b4c1f
b80229b21b4c1fb80228b21b4c1fb80227b21b491fb80226b21b491fb802
25b21b4a1fb80224b21b4a1fb80223b21b4b1fb80222b21b4c1fb80221b2
1b4c1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021db21a4e
1fb8021cb21a4e1fb8021bb21a4f1fb8021ab21a4f1fb80219b21a4f1fb8
0218b21a4e1fb80217b21a4e1fb80216b21a4f1fb80215b21a4f1fb80214
b21a4f1fb80213b21a4e1fb80212b21a4e1fb80211b21a4f1fb80210b21a
4e1fb8020fb21a4e1fb8020eb21a4f1fb8020db21a4f1fb8020cb21a4f1f
b8020bb21a4f1fb8020ab21a4f1fb80209b219501fb80208b219511fb802
07b219511fb80206b219511fb80205b219511fb80204b219501fb80203b2
19511fb80202b219511fb80201b219511fb80200b219511fb801ffb21951
1fb801feb219511fb801fdb219501fb801fcb219511fb801fbb219511fb8
01fab219511fb801f9b219511fb801f8b219511fb801f7b219511fb801f6
b218531fb801f5b218531fb801f4b218541fb801f3b218541fb801f2b218
541fb801f1b218541fb801f0b218531fb801efb218531fb801eeb218541f
b801edb218541fb801ecb218541fb801ebb218541fb801eab218531fb801
e9b218531fb801e8b218531fb801e7b218541fb801e6b218541fb801e5b2
18541fb801e4b218541fb801e3b218531fb801e2b218531fb801e1b21854
1fb801e0b218541fb801dfb218541fb801deb218541fb801ddb217561fb8
01dcb217561fb801dbb217571fb801dab217571fb801d9b217561fb801d8
b217561fb801d7b217571fb801d6b217571fb801d5b217571fb801d4b217
571fb801d3b217561fb801d2b217571fb801d1b217561fb801d0b217561f
b801cfb217571fb801ceb217571fb801cdb217571fb801ccb217571fb801
cbb217571fb801cab217561fb801c9b217561fb801c8b217571fb801c7b2
17571fb801c6b217571fb801c5b217571fb801c4b2163e1fb801c3b2163f
1fb801c2b2163f1fb801c1b2165b1fb801c0b2165b1fb801bfb2165b1fb8
01beb2165b1fb801bdb2165b1fb801bcb2165b1fb801bbb2165b1fb801ba
b2163f1fb801b9b2163f1fb801b8b2165b1fb801b7b2165b1fb801b6b216
5b1fb801b5b2165b1fb801b4b2165b1fb801b3b2165b1fb801b2b2165b1f
b801b1b2163f1fb801b0b2163e1fb801afb2163f1fb801aeb2163f1fb801
adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2165b1fb801a9b2
165b1fb801a8b2163e1fb801a7b2163f1fb801a6b2165b1fb801a5b2165b
1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b2165b1fb8
01a0b2165b1fb8019fb2165b1fb8019eb215621fb8019db215621fb8019c
b215631fb8019bb215641fb8019ab215651fb80199b215661fb80198b215
661fb80197b215661fb80196b215661fb80195b215661fb80194b215661f
b80193b215661fb80192b215611fb80191b215621fb80190b215631fb801
8fb215641fb8018eb215641fb8018db215651fb8018cb215661fb8018bb2
15661fb8018ab215631fb80189b215641fb80188b215551fb80187b21561
1fb80186b215621fb80185b215621fb80184b215631fb80183b215651fb8
0182b215661fb80181b215661fb80180b215661fb8017fb215661fb8017e
b215661fb8017db215661fb8017cb215661fb8017bb215661fb8017ab215
451fb80179b215611fb80178b215621fb80177b215621fb80176b215631f
b80175b215641fb80174b215641fb80173b215651fb80172b215661fb801
71b215661fb80170b215661fb8016fb215661fb8016eb215661fb8016db2
15661fb8016cb215661fb8016bb215551fb8016ab215451fb80169b21545
1fb80168b215361fb80167b215361fb80166b214821fb80165b214561fb8
0164b2147f1fb80163b214551fb80162b214561fb80161b214401fb80160
b214551fb8015fb214561fb8015eb2147e1fb8015db214831fb8015cb214
851fb8015bb2133d1fb8015ab2131e1fb80159b2131e1fb80158b2130a1f
b80157b2130a1fb80156b2130b1fb80155b2133a1fb80154b2133a1fb801
53b2133a1fb80152b2133b1fb80151b2133c1fb80150b2133c1fb8014fb2
12451fb8014eb212461fb8014db212461fb8014cb212451fb8014bb21245
1fb8014ab212461fb80149b212461fb80148b212461fb80147b212441fb8
0146b212451fb80145b212461fb80144b212461fb80143b211471fb80142
b211571fb80141b211581fb80140b211591fb8013fb2115a1fb8013eb211
5a1fb8013db2115b1fb8013cb2115b1fb8013bb2115b1fb8013ab2115b1f
b80139b2112b1fb80138b2112c1fb80137b211391fb80136b211391fb801
35b211461fb80134b211471fb80133b211471fb80132b211551fb80131b2
11551fb80130b211561fb8012fb211561fb8012eb211571fb8012db21157
1fb8012cb211581fb8012bb211591fb8012ab211591fb80129b2115a1fb8
0128b2115a1fb80127b2115b1fb80126b2115b1fb80125b2115b1fb80124
b2115b1fb80123b211591fb80122b2115a1fb80121b211391fb80120b211
471fb8011fb211561fb8011eb211561fb8011db211591fb8011cb211591f
b8011bb2115b1fb8011ab2115b1fb80119b2115b1fb80118b211561fb801
17b211561fb80116b211571fb80115b211571fb80114b211581fb80113b2
115a1fb80112b2115a1fb80111b2115b1fb80110b2115b1fb8010fb2115b
1fb8010eb2115b1fb8010db2115a1fb8010cb2115b1fb8010bb2105d1fb8
010ab2105e1fb80109b2105f1fb80108b2105f1fb80107b2105f1fb80106
b2105f1fb80105b2105d1fb80104b2105e1fb80103b2105f1fb80102b210
5f1fb80101b2105f1fb8010040ff105f1fff105d1ffe105f1ffd105f1ffc
105f1ffb105f1ffa105d1ff9105e1ff8105f1ff7105f1ff6105f1ff5105f
1ff40f621ff30f621ff20f631ff10f641ff00f641fef0f641fee0f641fed
0f621fec0f621feb0f631fea0f641fe90f641fe80f641fe70f641fe60f62
1fe50f621fe40f641fe30f621fe20f621fe10f631fe00f641fdf0f641fde
0f641fdd0f641fdc0f641fdb0f641fda0e671fd90e681fd80e681fd70e68
1fd60e681fd50e671fd40e681fd30e681fd20e681fd10e671fd00e681fcf
0e681fce0e681fcd0e681fcc0e681fcb0e681fca0e681fc90e681fc80d6b
1fc70d6c1fc60d2a1fc50d6c1fc40d2c1fc30d6b1fc20d6c1fc10d6d1f40
ffc00d6a1fbf0d691fbe0d681fbd0d6b1fbc0d311fbb0d311fba0d311fb9
0c711fb80c721fb70c731fb60c741fb50c741fb40c741fb30c731fb20c74
1fb10d311fb00d311faf0d311fae0d311fad0d311fac0d311fab0d311faa
0d311fa90b7e1fa80b7a1fa70b791fa60b7a1fa50b7c1fa40b7d1fa30b7e
1fa20b7e1fa10b7e1fa00b7e1f9f0b7e1f9e0b7e1f9d0b7e1f9c0b7e1f9b
0b7e1f9a0b2d1f990b2d1f980aa71f970aa51f960aa71f950aa71f940aa7
1f930aa71f920a681f910a821f900a9b1f8f0a9d1f8e0a9f1f8d0aa71f8c
0aa71f8503251f8403381f8301381f8255805581ab80557f557d557eab7d
550b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557bab7a557955
775578ab7755ba028900660288403c5576ab755504751475747503f47501
ab750144750130750102007510752075030c7455725573ab725500725072
8072b072043bb072e072020072010ab8ffc0b3721b1e46b8ffc0407c720d
104671556f5570ab6f556e666d556a03251f6938675568ab675566386455
65ab645563386255613860555f385d555eab5d555c385a555bab5a555938
58555703251f5638545555ab54555338515552ab51554f384e554e03251f
4d384b554cab4b554a38485549ab4855473846554503381f001c101c201c
0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b04001bb01bc01b
03120f1a1f1a02290f1901434f19016f197f198f19030f18cf1802401829
2c460f17cf17df17ef1704134017292e460016101620160315b8ffc0b316
4d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc0404d162326460f15
010f151f1502451f15010011e011f0110315bf10cf10020f0f010f0fff0f
02400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d1f0d020f0d
1f0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02553f0b4f0b
02400b3f4346400b2d30460003012001010001100120010308b8ffc0b301
151f46b80100b316010501b80190b154532b2b4bb807ff524bb008505bb0
0188b02553b00188b040515ab00688b000555a5b58b101018e59b1010243
54b0144b515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb080
5358b0401d594bb0ff5358b0001db1160042592b5e7375732b2b745e732b
2b5e73742b73742b7374745e7301755e73742b2b2b2b5e732b5e732b7374
755e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e735f73737373742b
2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b185f5e000000>
[16233 8533 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
3 5672 857 <00030049fff704ac00de0017002f00470039bf0030026f003c0018026e00
240000026fb70c374c1f4c432b13b80153b2074c28ba027f028000582b2b
3ffdc4c43f3f012fedd4edd4ed313025140e0423222e0235343e0433321e
0205140e0423222e0235343e0433321e0205140e0423222e0235343e0433
321e020125050a0f172b221b231408060a0f1628251d22140701c3050910
162c211c221507050b0e1629251c23140601c4050a0f172b221b23140806
0a0f1628251d221407970d262722170d09121a120f272620170d0a131a10
0d262722170d09121a120f272620170d0a131a100d262722170d09121a12
0f272620170d0a131a00>CBIAAA+Calibri,Italic AddT42Char 
2 0 0 <00050000fe7303da050e00030007003b00550056004fb52d162d16083c41
0a01ed00490007016400020020018c000800010164401204022537060351
1b0d117051015144070254003fdddedd5ddeddcd3fdddecd012fddedd6ed
10fdd6ed1239392f2f3130011121110111211101140e020707060623222e
02373736363333323e0235342e0223220e0223222635343e02373e033332
1e0201140e0207060623222e0235343e0237363633321e020103dafc5b03
4ffd06027b1f456e4e24021f1b0e140c050120051f17083d4f2e130f2135
2828402f1f070a060205080608293a4422445e3a1afeb503070b070a2016
161a0e0504070c0809201913190e04fe46050efaf2050efb43046cfb9403
313467523605980a0802040606bc1b17253b4621192b20130f13100c0e05
131612060713120b263d4afd8b08171a17070a0a070c100a091818160809
0a060c10fd38>CBIAAA+Calibri,Italic AddT42Char 
CBIAAA+Calibri,Italic /CharStrings get begin
/ellipsis 857 def
end
CBIAAA+Calibri,Italic /Encoding get
dup 133 /ellipsis put
pop
end
%ADOEndSubsetFont
/BNPBOT+Calibri,Italic /CBIAAA+Calibri,Italic findfont ct_VMDictPut
/BNPBOT+Calibri,Italic*1 
[133{/.notdef}rp /ellipsis 122{/.notdef}rp]
BNPBOT+Calibri,Italic nf
BNPBOT+Calibri,Italic*1 [12 0 0 -12 0 0 ]msf
230.685 143.614 mo
(\205\205)
[8.39996 0 ]xsh
BNPBOS+Calibri,Italic*1 [12 0 0 -12 0 0 ]msf
247.485 143.614 mo
( )sh
BNPBOS+Calibri,Italic*1 [12 0 0 -12 0 0 ]msf
328.675 69.4136 mo
(Washer)
[10.32 6.22809 4.56009 6.22809 5.73596 0 ]xsh
BNPBOS+Calibri,Italic*1 [12 0 0 -12 0 0 ]msf
365.905 69.4136 mo
( )sh
%ADOBeginSubsetFont: RDHAAA+Calibri,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal RDHAAA+Calibri,Italic gcheck setglobal} if
2 336 18 <00010073fff00479051e00380069ba027d027e00582bb10102435558b31d
1d0010b80255b62d041a041a1509b8012ab2345315b8012cb3402856282b
183f1a4ded3fed1139392f2f012fedc4392f31301bb5041a041a1509b801
2ab2345315b8012cb3402856282b183f1a4ded3fed1139392f2f31305901
14060623222e0223220e0415141e0233323e0233321615140e0823222e02
35343e0433321e0204790e170d0e2640654c548a6f54371c284c6e464e71
5136110b0a0304050809154361794466a4733f284e759bc274497f5a2804
8a153e24252b253f6b8c999c46507d562c232b2310100513161a17131427
23193d77b1735fc9bea87f4921322700>RDHAAA+Calibri,Italic AddT42Char 
2 13200 393 <0002fff8fe9403d003ca002a003f0092ba027f028000582bb10102435558
400d2135360c0d350d35180d171800b8021e401c2b170c363521040730f9
264a170d182004121b49124f39f840074d282b183f1a4ded3f3f1217393f
ed121739012fd4ed2f11331133107d870ec4c411013331301b401a0c3635
21040730f9264a170d182004121b49124f39f840074d282b183f1a4ded3f
3f1217393fed12173931305901140e0423222e0227030e0323222e023713
363633321e0207073e0333321e0207342e0223220e020707161633323e04
03d016304b6a8b582d4a3e3416550209142119171f120501fd02242a151a
100401220e435d723b4c67401cad0f2135273670604b11212f6c44355743
31210f02843a91948b6c4112202b1afe50080c080404080c0804ea100e03
070c08ab214b412a3457774f2b48341c3c6c9357a5464532546a7270>RDHAAA+Calibri,Italic AddT42Char 
RDHAAA+Calibri,Italic /CharStrings get begin
/C 18 def
/p 393 def
end
RDHAAA+Calibri,Italic /Encoding get
dup 67 /C put
dup 112 /p put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BNPBOS+Calibri,Italic*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C /D 11{/.notdef}rp /P 5{/.notdef}rp 
/V /W 9{/.notdef}rp /a /b /c /.notdef /e 
2{/.notdef}rp /h /i 2{/.notdef}rp /l /m /.notdef /o 
/p /.notdef /r /s /t /u 3{/.notdef}rp /y 
134{/.notdef}rp]
BNPBOS+Calibri,Italic nf
BNPBOS+Calibri,Italic*1 [12 0 0 -12 0 0 ]msf
40.585 76.0536 mo
(Computer)
[6.26404 6.20401 9.588 6.22809 6.2281 3.84007 5.73596 0 ]xsh
BNPBOS+Calibri,Italic*1 [12 0 0 -12 0 0 ]msf
88.845 76.0536 mo
( )sh
%ADOBeginSubsetFont: RDHAAA+Calibri,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal RDHAAA+Calibri,Italic gcheck setglobal} if
2 1798 62 <00010058000003010514001c0056ba027d027e00582bb10102435558400d
18190e000d0d180e0308135219b80129b3400854282b183f1a4ded3f1217
39012fcdc6333231301bb70d180e0308135219b80129b3400854282b183f
1a4ded3f12173931305925140e042321222e0237133e0333321e02070321
321603010305070c100afdc30c15100605ef010c1622181821120602df01
d00d0b7305161a1a160e07111b1304af070c070505070c07fba01200>RDHAAA+Calibri,Italic AddT42Char 
2 2822 100 <000100a3fffa0473050e0022004eba027d027e00582bb101024355584009
000808181409130814b80126b5401f510e55282b183f3f1a4dfdc4012f33
d6cd3310cd31301bb10814b80126b5401f510e55282b183f3f1a4dfdc431
305901140e042321030e0323222e02371321222635343e04332132160473
0105080c110afe94e1020b1522191920120602e0fe960e0a0305080c0f0a
03840d0a04eb0615181b140dfb9e080c070505070c080462121007151a18
150d1300>RDHAAA+Calibri,Italic AddT42Char 
RDHAAA+Calibri,Italic /CharStrings get begin
/L 62 def
/T 100 def
end
RDHAAA+Calibri,Italic /Encoding get
dup 76 /L put
dup 84 /T put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BNPBOS+Calibri,Italic*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C /D 7{/.notdef}rp /L 3{/.notdef}rp 
/P 3{/.notdef}rp /T /.notdef /V /W 9{/.notdef}rp /a 
/b /c /.notdef /e 2{/.notdef}rp /h /i 2{/.notdef}rp 
/l /m /.notdef /o /p /.notdef /r /s 
/t /u 3{/.notdef}rp /y 134{/.notdef}rp]
BNPBOS+Calibri,Italic nf
BNPBOS+Calibri,Italic*1 [12 0 0 -12 0 0 ]msf
132.555 81.4836 mo
(LCD TV)
[4.55998 6.26404 7.38007 2.67598 5.75998 0 ]xsh
BNPBOS+Calibri,Italic*1 [12 0 0 -12 0 0 ]msf
165.935 81.4836 mo
( )sh
%ADOBeginSubsetFont: RDHAAA+Calibri,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal RDHAAA+Calibri,Italic gcheck setglobal} if
2 1468 44 <00010052fffa04f20514002f00baba027d027e00582bb101024355584016
230c0d220d220d1817240b0a25002f250a172a522423b8012a401d400b18
252f22041d170a000d0428000c0116030c0c121d5212550555282b183f3f
3f12392f005f5e5d2b1739121739c41a4dfdc43f012fd0c132337d87c4c4
011810c63332107d87c4c431301bb32a522423b8012a401d400b18252f22
041d170a000d0428000c0116030c0c121d5212550555282b183f3f3f1239
2f005f5e5d2b1739121739c41a4dfdc43f313059250e0323222e02371321
030e0323222e0237133e0333321e02070321133e0333321e020703f8020b
15211a182013060372fdb372020a1622181a20120602f8010c1621191821
12050167024c68010b16211a182013050219070c070505070c07023ffdc1
070c070505070c0704dc070c070505070c07fdf90207070c070505070c07
>RDHAAA+Calibri,Italic AddT42Char 
RDHAAA+Calibri,Italic /CharStrings get begin
/H 44 def
end
RDHAAA+Calibri,Italic /Encoding get
dup 72 /H put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BNPBOS+Calibri,Italic*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C /D 3{/.notdef}rp /H 3{/.notdef}rp 
/L 3{/.notdef}rp /P 3{/.notdef}rp /T /.notdef /V /W 
9{/.notdef}rp /a /b /c /.notdef /e 2{/.notdef}rp /h 
/i 2{/.notdef}rp /l /m /.notdef /o /p /.notdef 
/r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
BNPBOS+Calibri,Italic nf
BNPBOS+Calibri,Italic*1 [12.024 0 0 -12.024 0 0 ]msf
126.555 105.024 mo
(Hair Dryer)
[7.44287 6.22852 2.64523 4.07617 2.8737 7.43089 4.07617 5.27863 5.74741 0 ]xsh
BNPBOS+Calibri,Italic*1 [12.024 0 0 -12.024 0 0 ]msf
176.495 105.024 mo
( )sh
BNPBOT+Calibri,Italic*1 [12 0 0 -12 0 0 ]msf
143.135 129.604 mo
(\205\205)
[8.39996 0 ]xsh
BNPBOS+Calibri,Italic*1 [12 0 0 -12 0 0 ]msf
159.935 129.604 mo
( )sh
%ADOBeginSubsetFont: RDHAAA+Calibri,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal RDHAAA+Calibri,Italic gcheck setglobal} if
2 1090 39 <0001006effee04ff0520004600baba027d027e00582bb10102435558b42a
2b2c001bb801efb52c0020200013b80237b6392b180707180cbb01270040
00270103400f1c1b2c1c00011c1c01000334405318b8012bb3403456282b
183f1a4ded3f1217392f2f2f11393910ed10ed11392f1239012fedc4392f
10d4ed7d870ec4c431301bb52b180707180cbb0127004000270103400f1c
1b2c1c00011c1c01000334405318b8012bb3403456282b183f1a4ded3f12
17392f2f2f11393910ed10ed11392f123931305901140e0423222e022322
0e0415141e02333236371321222635343e043321321607030606070e0323
222e0235343e0433321e0404ff0305080a0c070f33557a55599b82664725
336088543e873a4bfed50c0d0305090c0f09019b1c190764040d0809496f
8b4c82c68646315c87afd27a467a60421808048107151719130b242d2535
5d7f95a45458875c2f1d1e0177111007171818130b2620fe0e1317090923
241b4380b6736bcfba9e724219232a161400>RDHAAA+Calibri,Italic AddT42Char 
2 10638 336 <00020042fe9303e103ca003c005100b4ba027f028000582bb10102435558
400d33343c3c3d51501d1c3d1c3d47b8021e40260b29001c343c001c0405
37491f513d33042440f9304a2809f51212174cf8244d17e140054f282b18
3f1a4ded3fed12392f00ed2b3fed1217393f121739012f332fc4edc4107d
870ec4c4c411013312393931301b4022343c001c040537491f513d330424
40f9304a2809f51212174cf8244d17e140054f282b183f1a4ded3fed1239
2f00ed2b3fed1217393f121739313059050e0323222627262635343e0433
321e0233323e02373636370e0323222e0235343e04333216173736363332
1e020707262623220e0415141e0233323e0237031d10476e97605389290f
0b0105070b10090c243c5941365741290a11220b10465c6e394b683f1c16
304b6a8b58597f3213042628141b100401d32f6d44365643321f0f0f2135
26376f604a122e50784f2821170a130f06161618130b151a16162c442f5b
7821254b3f27325777453a91938b6d42483f5b100e03080c07ec45453253
6c716f2d2b48331e3d6c9357>RDHAAA+Calibri,Italic AddT42Char 
RDHAAA+Calibri,Italic /CharStrings get begin
/G 39 def
/g 336 def
end
RDHAAA+Calibri,Italic /Encoding get
dup 71 /G put
dup 103 /g put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BNPBOS+Calibri,Italic*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C /D 2{/.notdef}rp /G /H 
3{/.notdef}rp /L 3{/.notdef}rp /P 3{/.notdef}rp /T /.notdef /V 
/W 9{/.notdef}rp /a /b /c /.notdef /e /.notdef 
/g /h /i 2{/.notdef}rp /l /m /.notdef /o 
/p /.notdef /r /s /t /u 3{/.notdef}rp /y 
134{/.notdef}rp]
BNPBOS+Calibri,Italic nf
BNPBOS+Calibri,Italic*1 [12 0 0 -12 0 0 ]msf
17.955 102.744 mo
(Garbage Disposal)
[7.66796 6.22809 4.11603 6.19209 6.22809 6.2281 5.73596 2.18396 7.42807 2.63995 4.56009 6.22809 
6.228 4.5601 6.2281 0 ]xsh
BNPBOS+Calibri,Italic*1 [12 0 0 -12 0 0 ]msf
103.175 102.744 mo
( )sh
%ADOBeginSubsetFont: RDHAAA+Calibri,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal RDHAAA+Calibri,Italic gcheck setglobal} if
2 2330 75 <00020072ffed051205210017002f0057ba027d027e00582bb10102435558
bf00000239001800240253000c001d0127b2135329b80129b3400756282b
183f1a4ded3fed012fedd4ed31301bb9001d0127b2135329b80129b34007
56282b183f1a4ded3fed31305901140e0423222e0235343e0433321e0207
342e0223220e0415141e0233323e0405121c426da0dc8e72ac733a1e456f
a1d88c71ab733ab820467452689d734b2d131f487353679c724c2e13035c
4dbec4b98f583971a66d56c6c5b68d533b73a97a4675542f4d7c9da09637
4773522d4b7a9b9f9600>RDHAAA+Calibri,Italic AddT42Char 
2 12686 374 <0001003ffffa03b003ca003a007bba027f028000582bb101024355584026
311a1a1b26040e03000f0114030f0e2515f940364a251b0e041a0f312608
202b49204c094c282b183f3f3f1217393f1a4ded012fc4c45f5e5d321133
c63332113331301b401615f940364a251b0e041a0f312608202b49204c09
4c282b183f3f3f1217393f1a4ded31305901140607030e0323222e023713
363635342623220e0207030e0323222e0237133e0333321e0207073e0333
321e0203b00807710209152019181f1105016f0705343d356f5f4b115002
0a142118191f110502b50109131d14151b0f0401220f445e713d435a3818
02d6234424fdce080b080404080b08022c1f3a163d4b3d6b9356fe6e080b
080404080b080385070c080303080c07ac224c402a294358>RDHAAA+Calibri,Italic AddT42Char 
3 290 448 <0001007cfffa03a303bc00310056ba027f028000582bb10102435558b900
210187b2121628bb021f0000002001fb400b40162d49220d1b490d4c282b
183f3f12393f012f1a4dedd4ed10dded31301b40092d49220d1b490d4c28
2b183f3f12393f313059011406070e03070e0323222e022703262635343e
0233321e02171315373e03373e0333321e0203a30604255d718750071219
20161f2615090185010108121f1a1a201106016c053b62544b27030b1523
1a181e110703a50a150b6ddfddd5630b0c070204080e0a03550b11070d0e
080303070d09fd1a0c0659a7b2c476090d0703030509>RDHAAA+Calibri,Italic AddT42Char 
RDHAAA+Calibri,Italic /CharStrings get begin
/O 75 def
/n 374 def
/v 448 def
end
RDHAAA+Calibri,Italic /Encoding get
dup 79 /O put
dup 110 /n put
dup 118 /v put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BNPBOS+Calibri,Italic*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C /D 2{/.notdef}rp /G /H 
3{/.notdef}rp /L 2{/.notdef}rp /O /P 3{/.notdef}rp /T /.notdef 
/V /W 9{/.notdef}rp /a /b /c /.notdef /e 
/.notdef /g /h /i 2{/.notdef}rp /l /m /n 
/o /p /.notdef /r /s /t /u /v 
2{/.notdef}rp /y 134{/.notdef}rp]
BNPBOS+Calibri,Italic nf
BNPBOS+Calibri,Italic*1 [12 0 0 -12 0 0 ]msf
54.675 127.684 mo
(Oven)
[7.90808 5.28 5.73596 0 ]xsh
BNPBOS+Calibri,Italic*1 [12 0 0 -12 0 0 ]msf
79.895 127.684 mo
( )sh
BNPBOT+Calibri,Italic*1 [12 0 0 -12 0 0 ]msf
58.655 141.434 mo
(\205\205)
[8.39996 0 ]xsh
BNPBOS+Calibri,Italic*1 [12 0 0 -12 0 0 ]msf
75.455 141.434 mo
( )sh
BNPBOS+Calibri,Italic*1 [12 0 0 -12 0 0 ]msf
328.675 92.4036 mo
(Toaster)
[4.79999 6.228 6.22812 4.32007 3.84009 5.73596 0 ]xsh
BNPBOS+Calibri,Italic*1 [12 0 0 -12 0 0 ]msf
363.955 92.4036 mo
( )sh
BNPBOT+Calibri,Italic*1 [12 0 0 -12 0 0 ]msf
337.825 110.454 mo
(\205\205)
[8.39996 0 ]xsh
BNPBOS+Calibri,Italic*1 [12 0 0 -12 0 0 ]msf
354.625 110.454 mo
( )sh
%ADOBeginSubsetFont: RDHAAA+Calibri,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal RDHAAA+Calibri,Italic gcheck setglobal} if
2 812 38 <00010052fffa03ee050e0027009eba027d027e00582bb10102435558400e
0915160816081621200d0d002009b801054012212416202800151015c015
03250315151b08b80126b54024511b55282b183f3f1a4ded12392f005f5e
5d2b39391239ed012fc4392f10c63332107d87c4c431301bb90009010540
12212416202800151015c01503250315151b08b80126b54024511b55282b
183f3f1a4ded12392f005f5e5d2b39391239ed31305901140e0423210321
321615140e042321030e0323222e02371336363321321603ee0105080c10
0afe275801c00c0b0205080c100afe416c010b1522191921120602f00730
1702450e0904ec0614191a160dfe48110f0815171a140dfde5080c070505
070c0804ae271f13>RDHAAA+Calibri,Italic AddT42Char 
RDHAAA+Calibri,Italic /CharStrings get begin
/F 38 def
end
RDHAAA+Calibri,Italic /Encoding get
dup 70 /F put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BNPBOS+Calibri,Italic*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C /D /.notdef /F /G 
/H 3{/.notdef}rp /L 2{/.notdef}rp /O /P 3{/.notdef}rp /T 
/.notdef /V /W 9{/.notdef}rp /a /b /c /.notdef 
/e /.notdef /g /h /i 2{/.notdef}rp /l /m 
/n /o /p /.notdef /r /s /t /u 
/v 2{/.notdef}rp /y 134{/.notdef}rp]
BNPBOS+Calibri,Italic nf
BNPBOS+Calibri,Italic*1 [13.92 0 0 -13.92 0 0 ]msf
64.055 227.164 mo
(LF Whitelist )
[5.76285 6.47281 3.14589 12.4445 7.18282 3.11803 4.31529 6.7094 3.11801 3.11803 5.27579 4.56584 
0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
BNPBOS+Calibri,Italic*1 [13.92 0 0 -13.92 0 0 ]msf
133.435 227.164 mo
( )sh
97.835 192.414 mo
97.675 202.674 li
100.675 202.724 li
100.835 192.454 li
cp
94.705 201.134 mo
99.065 210.204 li
103.705 201.264 li
cp
.781399 .482246 .0259403 0 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
BNPBOS+Calibri,Italic*1 [13.944 0 0 -13.944 0 0 ]msf
165.315 227.974 mo
(HF Whitelist )
[8.64529 6.47 3.15134 12.4101 7.22311 3.12338 4.32275 6.707 3.12341 3.12338 5.28488 4.55978 
0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
BNPBOS+Calibri,Italic*1 [13.944 0 0 -13.944 0 0 ]msf
237.575 227.974 mo
( )sh
202.835 192.404 mo
203.075 203.484 li
200.075 203.544 li
199.835 192.464 li
cp
206.045 201.914 mo
201.745 211.014 li
197.045 202.114 li
cp
.781399 .482246 .0259403 0 cmyk
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/BNPBOS+Calibri,Italic*1 uf
/BNPBOS+Calibri,Italic uf
/RDHAAA+Calibri,Italic uf
/BNPBOT+Calibri,Italic*1 uf
/BNPBOT+Calibri,Italic uf
/CBIAAA+Calibri,Italic uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
